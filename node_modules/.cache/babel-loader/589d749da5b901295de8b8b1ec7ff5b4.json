{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/Grid.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.blackdots = this.blackdots.bind(this);\n    this.state = {\n      arr: []\n    };\n  }\n\n  blackdots() {\n    console.log(\"hlel\");\n  }\n\n  componentWillMount() {// for (){\n    // }\n  }\n\n  render() {\n    // Fixed!!!\n    var size = 40;\n    this.state.arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      this.state.arr[i] = new Array(size);\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 39\n        }, this);\n      }\n    }\n\n    this.state.arr[0][0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 31\n    }, this); // Fixed!!!\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.arr.map(row => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/Grid.js"],"names":["React","Component","Grid","constructor","props","blackdots","bind","state","arr","console","log","componentWillMount","render","size","Array","i","j","map","row"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA4B;AACxBE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAIA,SAAKC,SAAL,GAAe,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAf;AAEA,SAAKC,KAAL,GAAW;AACPC,MAAAA,GAAG,EAAC;AADG,KAAX;AAGH;;AAEDH,EAAAA,SAAS,GAAG;AACRI,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEH;;AAEDC,EAAAA,kBAAkB,GAAE,CAChB;AAEA;AACH;;AAMDC,EAAAA,MAAM,GAAE;AAGJ;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,SAAKN,KAAL,CAAWC,GAAX,GAAiB,IAAIM,KAAJ,CAAUD,IAAV,CAAjB;;AAEA,SAAK,IAAIE,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACF,IAAf,EAAoBE,CAAC,EAArB,EAAwB;AACpB,WAAKR,KAAL,CAAWC,GAAX,CAAeO,CAAf,IAAoB,IAAID,KAAJ,CAAUD,IAAV,CAApB;AACH;;AAED,SAAK,IAAIE,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACF,IAAf,EAAoBE,CAAC,EAArB,EAAwB;AACpB,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACH,IAAf,EAAoBG,CAAC,EAArB,EAAwB;AACpB,aAAKT,KAAL,CAAWC,GAAX,CAAeO,CAAf,EAAkBC,CAAlB,iBAAsB;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAtB;AACH;AACJ;;AAED,SAAKT,KAAL,CAAWC,GAAX,CAAe,CAAf,EAAkB,CAAlB,iBAAsB;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAtB,CAjBI,CAkBJ;;AAKA,wBACI;AAAA,gBACK,KAAKD,KAAL,CAAWC,GAAX,CAAeS,GAAf,CAAoBC,GAAD,IAAS;AACzB,4BACI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,oBACKA;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH,OANA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA9DuB;AAkE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAehB,IAAf","sourcesContent":["import React, {Component} from \"react\"\n\nclass Grid extends Component{\n    constructor(props){\n        super(props);\n\n\n\n        this.blackdots=this.blackdots.bind(this);\n\n        this.state={\n            arr:[]\n        }\n    }\n\n    blackdots() {\n        console.log(\"hlel\");\n        \n    }\n\n    componentWillMount(){\n        // for (){\n\n        // }\n    }\n\n    \n    \n    \n\n    render(){\n        \n\n        // Fixed!!!\n        var size = 40;\n        this.state.arr = new Array(size);\n\n        for (let i=0;i<size;i++){\n            this.state.arr[i] = new Array(size);\n        }\n\n        for (let i=0;i<size;i++){\n            for (let j=0;j<size;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n\n        this.state.arr[0][0]= <div className=\"dot\"></div>;\n        // Fixed!!!\n        \n\n\n\n        return(\n            <div>\n                {this.state.arr.map((row) => {\n                    return (\n                        <div className=\"row\">\n                            {row}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\n\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}