{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/Grid.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [[]],\n      direction: \"RIGHT\"\n    };\n    this.snakeMove = this.snakeMove.bind(this); // this.moveUp=this.moveUp.bind(this);\n\n    this.thisfires = this.thisfires.bind(this);\n    this.moveRight = this.moveRight.bind(this); // this.moveDown=this.moveDown.bind(this);\n    // this.moveLeft=this.moveLeft.bind(this);\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      // case \"UP\":\n      //     this.moveUp();\n      //     break;\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n      // case \"DOWN\":\n      //     this.moveDown();\n      //     break;\n      // case \"LEFT\":\n      //     this.moveLeft();\n      //     break;\n    }\n  }\n\n  thisfires() {\n    console.log(\"this fires!!!\");\n  }\n\n  moveRight() {\n    var tempArr = this.state.arr;\n    tempArr.shift();\n    console.log(\"this is happenning\");\n    console.log(tempArr);\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.setState({\n      arr: tempArr\n    });\n  }\n\n  componentDidMount() {// setInterval(this.snakeMove,1000);\n  }\n\n  render() {\n    // Fixed!!!\n    var size = 40;\n    this.state.arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      this.state.arr[i] = new Array(size);\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 39\n        }, this);\n      }\n    } // Fixed!!!\n    // Snake update\n\n\n    let som = this.props.dots;\n\n    for (let i = 0; i < som.length; i++) {\n      let x = this.props.dots[i][0];\n      let y = this.props.dots[i][1]; // this.setState({\n      //     arr[x][y]:\n      // })\n\n      this.state.arr[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 35\n      }, this);\n    } // Snake update\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.arr.map(row => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/Grid.js"],"names":["React","Component","Grid","constructor","props","state","arr","direction","snakeMove","bind","thisfires","moveRight","console","log","tempArr","shift","push","length","setState","componentDidMount","render","size","Array","i","j","som","dots","x","y","map","row"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\n\nclass Grid extends Component{\n    constructor(props){\n        super(props);\n\n\n        this.state={\n            arr:[[]],\n            direction: \"RIGHT\"\n        }\n\n        this.snakeMove=this.snakeMove.bind(this);\n        // this.moveUp=this.moveUp.bind(this);\n        this.thisfires=this.thisfires.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        // this.moveDown=this.moveDown.bind(this);\n        // this.moveLeft=this.moveLeft.bind(this);\n    }\n\n    snakeMove() {\n\n        switch (this.state.direction){\n            // case \"UP\":\n            //     this.moveUp();\n            //     break;\n            case \"RIGHT\":\n                this.moveRight();\n                break;\n            // case \"DOWN\":\n            //     this.moveDown();\n            //     break;\n            // case \"LEFT\":\n            //     this.moveLeft();\n            //     break;\n        }            \n    }\n\n\n    thisfires(){\n        console.log(\"this fires!!!\");\n    }\n\n    moveRight(){\n        var tempArr=this.state.arr;\n        tempArr.shift();\n        console.log(\"this is happenning\");\n        console.log(tempArr);\n        tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n        this.setState({\n            arr: tempArr\n        })\n    }\n\n   \n\n    componentDidMount(){\n        // setInterval(this.snakeMove,1000);\n    }\n    \n     \n\n    render(){\n\n        // Fixed!!!\n        var size = 40;\n        this.state.arr = new Array(size);\n\n        for (let i=0;i<size;i++){\n            this.state.arr[i] = new Array(size);\n        }\n\n        for (let i=0;i<size;i++){\n            for (let j=0;j<size;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n        // Fixed!!!\n\n        // Snake update\n        let som=this.props.dots;\n        for (let i=0; i<som.length;i++){\n            let x = this.props.dots[i][0];\n            let y = this.props.dots[i][1];\n\n            // this.setState({\n            //     arr[x][y]:\n            // })\n\n            this.state.arr[x][y]= <div className=\"dot\"></div>;\n        }\n        // Snake update\n\n        return(\n            <div>\n                {this.state.arr.map((row) => {\n                    return (\n                        <div className=\"row\">\n                            {row}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\n\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}