{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\";\nimport React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speed: 100,\n      arr: [[]],\n      count: 0,\n      //From Snake.js\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      direction: \"RIGHT\",\n      directionUpdate: true,\n      //From Snake.js\n      //From Food.js\n      location: this.randomLocation(),\n      foodAte: false //From Food.js\n\n    };\n    this.bodyHit = this.bodyHit.bind(this);\n    this.cellCompare = this.cellCompare.bind(this);\n    this.setArr = this.setArr.bind(this);\n    this.gameReset = this.gameReset(this); //From Snake.js\n\n    this.snakeMove = this.snakeMove.bind(this);\n    this.snakeUpdate = this.snakeUpdate.bind(this);\n    this.moveUp = this.moveUp.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.moveDown = this.moveDown.bind(this);\n    this.moveLeft = this.moveLeft.bind(this);\n    this.eventHandler = this.eventHandler.bind(this);\n    this.snakeGrow = this.snakeGrow.bind(this); //From Snake.js\n    //From Food.js\n\n    this.randomLocation = this.randomLocation.bind(this); //From Food.js\n\n    this.eraseGrid = this.eraseGrid.bind(this);\n    this.refillGrid = this.refillGrid.bind(this);\n    this.intialFill = this.intialFill.bind(this);\n    this.checkFood = this.checkFood.bind(this);\n    this.getHead = this.getHead.bind(this); // this.boundaryHit=this.boundaryHit.bind(this);\n  }\n\n  gameReset() {\n    this.eraseGrid();\n    this.setState({\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      direction: \"RIGHT\",\n      directionUpdate: true,\n      //From Snake.js\n      //From Food.js\n      location: this.randomLocation(),\n      foodAte: false\n    });\n  }\n\n  setArr(array) {\n    this.setState({\n      arr: array\n    });\n  }\n\n  intialFill(size) {\n    var size = 40;\n    this.state.arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      this.state.arr[i] = new Array(size);\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 39\n        }, this);\n      }\n    }\n  } //From Snake.js\n\n\n  snakeUpdate() {\n    this.checkFood();\n    this.bodyHit(); // this.boundaryHit();\n\n    this.eraseGrid(); // Snake Entry to arr\n\n    this.refillGrid(this.state.dots); //Food Entry to arr\n\n    this.refillGrid(this.state.location);\n    console.log(this.state.dots.length);\n    this.setArr(this.state.arr);\n  }\n\n  cellCompare(cell1, cell2) {\n    return cell1[0] === cell2[0] && cell1[1] === cell2[1];\n  }\n\n  snakeGrow() {\n    let head = this.getHead();\n\n    switch (this.state.direction) {\n      case \"RIGHT\":\n        this.state.dots.push([head[0] + 1, head[1]]);\n        break;\n\n      case \"DOWN\":\n        this.state.dots.push([head[0], head[1] + 1]);\n        break;\n\n      case \"LEFT\":\n        this.state.dots.push([head[0] - 1, head[1]]);\n        break;\n\n      case \"UP\":\n        this.state.dots.push([head[0], head[1] - 1]);\n        break;\n    }\n  }\n\n  eraseGrid() {\n    for (let i = 0; i < this.state.arr.length; i++) {\n      for (let j = 0; j < this.state.arr.length; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 39\n        }, this);\n      }\n    }\n  }\n\n  refillGrid(arr) {\n    if (arr[0][0] === undefined) {\n      this.state.arr[arr[0]][arr[1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 45\n      }, this);\n      return;\n    }\n\n    ;\n\n    for (let i = 0; i < arr.length; i++) {\n      let x = arr[i][0];\n      let y = arr[i][1];\n      this.state.arr[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 35\n      }, this);\n    }\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      case \"UP\":\n        this.moveUp();\n        break;\n\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n\n      case \"DOWN\":\n        this.moveDown();\n        break;\n\n      case \"LEFT\":\n        this.moveLeft();\n        break;\n    }\n\n    this.snakeUpdate();\n  }\n\n  moveRight() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveDown() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] + 1]);\n    this.state.dots = tempArr;\n  }\n\n  moveLeft() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] - 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveUp() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] - 1]);\n    this.state.dots = tempArr;\n  }\n\n  eventHandler(e) {\n    if (!this.state.directionUpdate) return;\n\n    switch (e.code) {\n      case \"ArrowRight\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"RIGHT\";\n        break;\n\n      case \"ArrowDown\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"DOWN\";\n        break;\n\n      case \"ArrowLeft\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"LEFT\";\n        break;\n\n      case \"ArrowUp\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"UP\";\n        break;\n    }\n\n    this.state.directionUpdate = false;\n  }\n\n  componentDidMount() {\n    var size = 40;\n    this.intialFill(size);\n    setInterval(this.snakeMove, this.state.speed);\n    window.addEventListener(\"keydown\", this.eventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.eventHandler);\n  }\n\n  getHead() {\n    return this.state.dots[this.state.dots.length - 1];\n  } //From Snake.js\n  //From Food.js\n\n\n  checkFood() {\n    if (this.cellCompare(this.getHead(), this.state.location)) {\n      this.snakeGrow();\n    }\n  }\n\n  randomLocation() {\n    return [Math.floor(Math.random() * (40 - 0)) + 0, Math.floor(Math.random() * (40 - 0)) + 0];\n  } //From Food.js\n\n\n  bodyHit() {\n    let head = this.getHead();\n\n    for (let i = 0; i < this.state.dots.length; i++) {\n      if (this.state.dots[i][0] === head[0] && this.state.dots[i][1] === head[1]) {\n        console.log(\"Game Over!!!!!!\"); // this.gameReset();\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    this.state.directionUpdate = true;\n\n    if (this.state.count === 0) {\n      this.state.count++;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        arr: this.state.arr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","Component","Grid","App","constructor","props","state","speed","arr","count","dots","direction","directionUpdate","location","randomLocation","foodAte","bodyHit","bind","cellCompare","setArr","gameReset","snakeMove","snakeUpdate","moveUp","moveRight","moveDown","moveLeft","eventHandler","snakeGrow","eraseGrid","refillGrid","intialFill","checkFood","getHead","setState","array","size","Array","i","j","console","log","length","cell1","cell2","head","push","undefined","x","y","tempArr","shift","e","code","componentDidMount","setInterval","window","addEventListener","componentWillUnmount","removeEventListener","Math","floor","random","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport Grid from \"./Grid\"\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n\n        this.state={\n            speed: 100,\n            arr:[[]],\n            count: 0,\n            //From Snake.js\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            direction: \"RIGHT\",\n            directionUpdate: true,\n            //From Snake.js\n\n            //From Food.js\n            location: this.randomLocation(),\n            foodAte: false\n            //From Food.js\n        }\n        this.bodyHit=this.bodyHit.bind(this);\n        this.cellCompare=this.cellCompare.bind(this);\n        this.setArr=this.setArr.bind(this);\n        this.gameReset=this.gameReset(this);\n\n        //From Snake.js\n        this.snakeMove=this.snakeMove.bind(this);\n        this.snakeUpdate=this.snakeUpdate.bind(this);\n\n        this.moveUp=this.moveUp.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        this.moveDown=this.moveDown.bind(this);\n        this.moveLeft=this.moveLeft.bind(this);\n\n        this.eventHandler=this.eventHandler.bind(this);\n        this.snakeGrow=this.snakeGrow.bind(this);\n        //From Snake.js\n\n        //From Food.js\n        this.randomLocation=this.randomLocation.bind(this);\n        //From Food.js\n\n        this.eraseGrid=this.eraseGrid.bind(this);\n        this.refillGrid=this.refillGrid.bind(this);\n\n        this.intialFill=this.intialFill.bind(this);\n        this.checkFood=this.checkFood.bind(this);\n        this.getHead=this.getHead.bind(this);\n        \n        // this.boundaryHit=this.boundaryHit.bind(this);\n    }\n\n    gameReset(){\n        this.eraseGrid();\n        this.setState({\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            direction: \"RIGHT\",\n            directionUpdate: true,\n            //From Snake.js\n\n            //From Food.js\n            location: this.randomLocation(),\n            foodAte: false\n        })\n    }\n\n    setArr(array){\n        this.setState({\n            arr: array\n        })\n    }\n\n    intialFill(size){\n        var size = 40;\n        this.state.arr = new Array(size);\n\n        for (let i=0;i<size;i++){\n            this.state.arr[i] = new Array(size);\n        }\n\n        for (let i=0;i<size;i++){\n            for (let j=0;j<size;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n    }\n\n    //From Snake.js\n    \n\n    snakeUpdate(){\n\n        this.checkFood();\n        this.bodyHit();\n        // this.boundaryHit();\n\n\n        this.eraseGrid();\n        // Snake Entry to arr\n        this.refillGrid(this.state.dots);\n\n        //Food Entry to arr\n        this.refillGrid(this.state.location);\n\n        console.log(this.state.dots.length);\n\n        \n        \n        this.setArr(this.state.arr);\n   }\n\n   \n\n   cellCompare(cell1,cell2){\n        return ((cell1[0]===cell2[0]) && (cell1[1]===cell2[1]));\n   }\n\n    snakeGrow(){\n        let head=this.getHead();\n        switch (this.state.direction){\n            case \"RIGHT\":\n                this.state.dots.push([head[0]+1,head[1]]);\n                break;\n            case \"DOWN\":\n                this.state.dots.push([head[0],head[1]+1]);\n                break;\n            case \"LEFT\":\n                this.state.dots.push([head[0]-1,head[1]]);\n                break;\n            case \"UP\":\n                this.state.dots.push([head[0],head[1]-1]);\n                break;       \n        }\n    }\n\n    eraseGrid(){\n        for (let i=0;i<this.state.arr.length;i++){\n            for (let j=0;j<this.state.arr.length;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n    }\n\n    refillGrid(arr){\n\n        if (arr[0][0]===undefined) {\n            this.state.arr[arr[0]][arr[1]]= <div className=\"dot\"></div>;\n            return;\n        };\n        for (let i=0; i<arr.length;i++){\n            let x = arr[i][0];\n            let y = arr[i][1];\n\n            this.state.arr[x][y]= <div className=\"dot\"></div>;\n        }\n    }\n\n   snakeMove() {\n\n        switch (this.state.direction){\n            case \"UP\":\n                this.moveUp();\n                break;\n            case \"RIGHT\":\n                this.moveRight();\n                break;\n            case \"DOWN\":\n                this.moveDown();\n                break;\n            case \"LEFT\":\n                this.moveLeft();\n                break;\n        }  \n        this.snakeUpdate();    \n    }\n\n    moveRight(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveDown(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]+1]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveLeft(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0]-1,tempArr[tempArr.length-1][1]]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveUp(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]-1]);\n\n        this.state.dots=tempArr;\n    }\n\n   eventHandler(e){\n\n    if(!this.state.directionUpdate) return;\n\n    switch(e.code){\n        case \"ArrowRight\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"RIGHT\";\n            break;\n        case \"ArrowDown\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"DOWN\";\n            break;\n        case \"ArrowLeft\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"LEFT\";\n            break;\n        case \"ArrowUp\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"UP\";\n            break;\n        }\n        this.state.directionUpdate=false;\n    }\n\n    componentDidMount(){   \n        var size=40;\n        this.intialFill(size); \n        setInterval(this.snakeMove,this.state.speed);\n        window.addEventListener(\"keydown\",this.eventHandler);\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener(\"keydown\",this.eventHandler);\n    }\n\n    getHead(){\n        return this.state.dots[this.state.dots.length-1];\n    }\n\n\n    //From Snake.js\n\n    //From Food.js\n\n    checkFood(){\n        if(this.cellCompare(this.getHead(),this.state.location)){\n            this.snakeGrow();\n        }\n    }\n\n    randomLocation(){\n        return [Math.floor(Math.random() * (40 - 0)) + 0,Math.floor(Math.random() * (40 - 0)) + 0];\n    }\n\n    //From Food.js\n\n    bodyHit(){\n        let head=this.getHead();\n        for (let i=0;i<this.state.dots.length;i++){\n            if (this.state.dots[i][0]===head[0] && this.state.dots[i][1]===head[1]){\n                console.log(\"Game Over!!!!!!\");\n                // this.gameReset();\n            }\n        }\n        return null;\n\n   }\n     \n\n    render(){\n        this.state.directionUpdate=true;\n\n        if (this.state.count===0){\n            this.state.count++;\n        }\n    \n\n        return(\n            \n            <div className=\"container\">\n                <Grid arr={this.state.arr}/>\n            </div>\n            \n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}