{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/Snake.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Snake extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      direction: \"RIGHT\",\n      directionUpdate: true\n    };\n    this.snakeMove = this.snakeMove.bind(this);\n    this.snakeUpdate = this.snakeUpdate.bind(this);\n    this.moveUp = this.moveUp.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.moveDown = this.moveDown.bind(this);\n    this.moveLeft = this.moveLeft.bind(this);\n    this.eventHandler = this.eventHandler.bind(this);\n  }\n\n  snakeUpdate() {\n    // Snake update\n    let some = this.props.arr;\n\n    for (let i = 0; i < this.state.dots.length; i++) {\n      let x = this.state.dots[i][0];\n      let y = this.state.dots[i][1];\n      some[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 24\n      }, this);\n    } // Snake \n\n\n    this.props.setArr(some);\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      case \"UP\":\n        this.moveUp();\n        break;\n\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n\n      case \"DOWN\":\n        this.moveDown();\n        break;\n\n      case \"LEFT\":\n        this.moveLeft();\n        break;\n    }\n  }\n\n  moveRight() {\n    let tempArr = this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveDown() {\n    let tempArr = this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] + 1]);\n    this.state.dots = tempArr;\n  }\n\n  moveLeft() {\n    let tempArr = this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] - 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveUp() {\n    let tempArr = this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] - 1]);\n    this.state.dots = tempArr;\n  }\n\n  eventHandler(e) {\n    console.log(\"Some key Pressed!!!!\");\n    console.log(e.code);\n    if (!this.state.directionUpdate) return;\n\n    switch (e.code) {\n      case \"ArrowRight\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"RIGHT\";\n        break;\n\n      case \"ArrowDown\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"DOWN\";\n        break;\n\n      case \"ArrowLeft\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"LEFT\";\n        break;\n\n      case \"ArrowUp\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"UP\";\n        break;\n    }\n\n    this.state.directionUpdate = false;\n  }\n\n  componentDidMount() {\n    this.snakeUpdate(); // console.log(this.props.dots);\n    // this.snakeMove();\n\n    setInterval(this.snakeMove, 1000);\n    window.addEventListener(\"keydown\", this.eventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.eventHandler);\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default Snake;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/Snake.js"],"names":["React","Component","Snake","constructor","props","state","dots","direction","directionUpdate","snakeMove","bind","snakeUpdate","moveUp","moveRight","moveDown","moveLeft","eventHandler","some","arr","i","length","x","y","setArr","tempArr","shift","push","e","console","log","code","componentDidMount","setInterval","window","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\n\n\nclass Snake extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state={\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            direction: \"RIGHT\",\n            directionUpdate: true\n        }\n\n        this.snakeMove=this.snakeMove.bind(this);\n        this.snakeUpdate=this.snakeUpdate.bind(this);\n\n        this.moveUp=this.moveUp.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        this.moveDown=this.moveDown.bind(this);\n        this.moveLeft=this.moveLeft.bind(this);\n\n        this.eventHandler=this.eventHandler.bind(this);\n    }\n\n    snakeUpdate(){\n       // Snake update\n       let some=this.props.arr;\n       for (let i=0; i<this.state.dots.length;i++){\n           let x = this.state.dots[i][0];\n           let y = this.state.dots[i][1];\n\n           some[x][y]= <div className=\"dot\"></div>;\n       }\n       // Snake \n       this.props.setArr(some);\n   }\n\n   snakeMove() {\n\n    switch (this.state.direction){\n        case \"UP\":\n            this.moveUp();\n            break;\n        case \"RIGHT\":\n            this.moveRight();\n            break;\n        case \"DOWN\":\n            this.moveDown();\n            break;\n        case \"LEFT\":\n            this.moveLeft();\n            break;\n    }  \n             \n}\n\nmoveRight(){\n    let tempArr=this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n\n    this.state.dots=tempArr;\n}\n\nmoveDown(){\n    let tempArr=this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]+1]);\n\n    this.state.dots=tempArr;\n}\n\nmoveLeft(){\n    let tempArr=this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length-1][0]-1,tempArr[tempArr.length-1][1]]);\n\n    this.state.dots=tempArr;\n}\n\nmoveUp(){\n    let tempArr=this.state.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]-1]);\n\n    this.state.dots=tempArr;\n}\n\n   eventHandler(e){\n    console.log(\"Some key Pressed!!!!\");\n    console.log(e.code);\n\n    if(!this.state.directionUpdate) return;\n\n    switch(e.code){\n        case \"ArrowRight\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"RIGHT\";\n            break;\n        case \"ArrowDown\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"DOWN\";\n            break;\n        case \"ArrowLeft\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"LEFT\";\n            break;\n        case \"ArrowUp\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"UP\";\n            break;\n        }\n        this.state.directionUpdate=false;\n    }\n\n    componentDidMount(){   \n        this.snakeUpdate(); \n        // console.log(this.props.dots);\n        // this.snakeMove();\n        setInterval(this.snakeMove,1000);\n        window.addEventListener(\"keydown\",this.eventHandler);\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener(\"keydown\",this.eventHandler);\n    }\n\n    render(){\n\n        return null;\n    }\n\n\n\n}\n\nexport default Snake;"]},"metadata":{},"sourceType":"module"}