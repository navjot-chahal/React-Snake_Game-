{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"./Grid\";\nimport { useInterval } from \"./useInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSize = 40;\n\nconst arrInitialize = () => {\n  let arr = new Array(gridSize);\n\n  for (let i = 0; i < gridSize; i++) {\n    arr[i] = new Array(gridSize);\n  }\n\n  return arr;\n};\n\nconst peak = 0;\n\nfunction App() {\n  _s();\n\n  // Setting States\n  const [arr, setArr] = useState(arrInitialize);\n  const [dots, setDots] = useState([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);\n  const [delay, setDelay] = useState(200);\n  const [food, setFood] = useState([10, 10]);\n  const [direction, setDirection] = useState(\"RIGHT\"); // Array Functions\n\n  function arrErase(anyArr) {\n    let thisArr = [...anyArr];\n\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        thisArr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 33\n        }, this);\n      }\n    }\n\n    return thisArr;\n  } // Snake\n\n\n  function snakeMove() {\n    let snakeDots = [...dots];\n    let head = snakeDots[snakeDots.length - 1];\n\n    switch (direction) {\n      case \"RIGHT\":\n        head = [head[0] + 1, head[1]];\n        break;\n\n      case \"DOWN\":\n        head = [head[0], head[1] + 1];\n        break;\n\n      case \"LEFT\":\n        head = [head[0] - 1, head[1]];\n        break;\n\n      case \"UP\":\n        head = [head[0], head[1] - 1];\n        break;\n    }\n\n    snakeDots.push(head);\n    snakeDots.shift();\n    console.log(\"Current head: \" + head);\n    if (checkHitBoundary(head) || checkHitBody(head) || checkForFood(head)) return;else {\n      setDots(snakeDots);\n    }\n  } // Snake Update\n\n\n  function update() {\n    let array = arrErase(arr); // Snake add\n\n    for (let i = 0; i < dots.length; i++) {\n      array[dots[i][0]][dots[i][1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 45\n      }, this);\n    } // Food add\n\n\n    array[food[0]][food[1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 35\n    }, this);\n    setArr(array);\n  } // Keyboard Event\n\n\n  function onKeyDown(e) {\n    // console.log(\"Key pressed\")\n    // setDelay(prevState => prevState / 2)\n    e = e || window.event;\n\n    switch (e.keyCode) {\n      case 38:\n        setDirection(\"UP\");\n        break;\n\n      case 40:\n        setDirection(\"DOWN\");\n        break;\n\n      case 37:\n        setDirection(\"LEFT\");\n        break;\n\n      case 39:\n        setDirection(\"RIGHT\");\n        break;\n    }\n  } // LifeCycle Functions\n\n\n  useInterval(() => {\n    snakeMove(); // console.log(\"Snake Moving\")\n  }, delay);\n  useEffect(() => {\n    document.onkeydown = onKeyDown;\n    setArr(arrErase(arr));\n  }, []);\n  useEffect(() => {\n    console.log(\"useEffect ran\");\n    update();\n  }, [dots]); // Cheker Functions\n\n  function checkHitBoundary(head) {\n    console.log(head[0]);\n\n    if (head[0] > 39 || head[0] < 0) {\n      gameReset();\n    } else if (head[1] > 39 || head[1] < 0) {\n      gameReset();\n    }\n  }\n\n  function checkHitBody(head) {}\n\n  function checkForFood(head) {} // Game Functions \n\n\n  function gameReset() {\n    console.log(\"Game Reset\");\n    setArr(arrErase(arr));\n    setDelay(200);\n    setDirection(\"RIGHT\");\n    setDots([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: Grid(arr)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"i/XlWHFxAhs9k3PnSvW/Fco6yYw=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","useState","useEffect","useRef","Grid","useInterval","gridSize","arrInitialize","arr","Array","i","peak","App","setArr","dots","setDots","delay","setDelay","food","setFood","direction","setDirection","arrErase","anyArr","thisArr","j","snakeMove","snakeDots","head","length","push","shift","console","log","checkHitBoundary","checkHitBody","checkForFood","update","array","onKeyDown","e","window","event","keyCode","document","onkeydown","gameReset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport {Grid} from \"./Grid\"\nimport { useInterval } from \"./useInterval\"\n\nconst gridSize= 40\n\nconst arrInitialize = () => {\n    let arr = new Array(gridSize)\n\n    for (let i=0; i<gridSize ; i++){\n        arr[i] = new Array(gridSize)\n    }\n\n    return arr\n}\n\nconst peak=0\n\n\nfunction App() {\n\n    // Setting States\n    const [arr, setArr] = useState(arrInitialize)\n    const [dots, setDots] = useState([[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]])\n    const [delay, setDelay] = useState(200)\n    const [food, setFood] = useState([10,10])\n    const [direction, setDirection] = useState(\"RIGHT\")\n\n\n\n    // Array Functions\n\n    function arrErase(anyArr) {\n        let thisArr = [...anyArr]\n\n        for (let i=0 ; i<gridSize ; i++) {\n            for (let j=0 ; j<gridSize ; j++) {\n                thisArr[i][j] = <div className=\"block\"></div>\n            }\n        }\n        return thisArr\n    }\n\n    // Snake\n    function snakeMove(){\n        let snakeDots = [...dots]\n        let head = snakeDots[snakeDots.length - 1]\n\n        switch (direction) {\n            case \"RIGHT\":\n                head = [head[0] + 1, head[1]]\n                break\n            case \"DOWN\":\n                head = [head[0], head[1] + 1]\n                break\n            case \"LEFT\":\n                head = [head[0] - 1, head[1]]\n                break\n            case \"UP\":\n                head = [head[0], head[1] - 1]\n                break\n        }\n\n        snakeDots.push(head)\n        snakeDots.shift()\n        console.log(\"Current head: \" + head)\n        \n        if (\n            checkHitBoundary(head) ||\n            checkHitBody(head) ||\n            checkForFood(head)\n        ) return\n\n        else{\n            setDots(snakeDots)\n        }\n        \n    }\n\n    // Snake Update\n\n    function update(){\n\n        let array = arrErase(arr)\n\n        // Snake add\n        for (let i=0; i<dots.length; i++) {\n            array[dots[i][0]][dots[i][1]] = <div className=\"dot\"></div>\n        }\n\n        // Food add\n\n        array[food[0]][food[1]] = <div className=\"dot\"></div>\n\n        \n        setArr(array)\n\n    }\n\n    // Keyboard Event\n    function onKeyDown(e){\n        // console.log(\"Key pressed\")\n        \n        // setDelay(prevState => prevState / 2)\n\n        e = e || window.event\n        switch (e.keyCode) {\n            case 38:\n                setDirection(\"UP\")\n                break\n            case 40:\n                setDirection(\"DOWN\")\n                break\n            case 37:\n                setDirection(\"LEFT\")\n                break\n            case 39:\n                setDirection(\"RIGHT\")\n                break\n        }\n    }\n\n\n    // LifeCycle Functions\n\n    useInterval(() => {\n        snakeMove()\n        // console.log(\"Snake Moving\")\n    } ,delay)\n\n    useEffect(() => {\n        document.onkeydown = onKeyDown\n        setArr(arrErase(arr))\n    },[])\n\n\n    useEffect(() => {        \n        console.log(\"useEffect ran\")\n        update()\n    },[dots])\n\n\n\n    // Cheker Functions\n\n    function checkHitBoundary(head){\n        console.log(head[0])\n        if (head[0]>39 || head[0]<0) {\n            gameReset()\n        }\n        else if (head[1]>39 || head[1]<0) {\n            gameReset()\n        }\n    }\n\n    function checkHitBody(head){\n\n    }\n\n    function checkForFood(head){\n\n    }\n\n    // Game Functions \n\n    function gameReset(){\n        console.log(\"Game Reset\")\n        setArr(arrErase(arr))\n        setDelay(200)\n        setDirection(\"RIGHT\")\n        setDots([[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]])\n        \n    }\n\n\n\n        \n\n\n\n    return(\n        <div className=\"container\">\n            {Grid(arr)}\n        </div>\n    )\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}