{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"./Grid\";\nimport { useInterval } from \"./useInterval\";\nimport { randomNumber } from \"./randomNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst speed = 150;\nconst gridSize = 40;\n\nconst arrInitialize = () => {\n  let arr = new Array(gridSize);\n\n  for (let i = 0; i < gridSize; i++) {\n    arr[i] = new Array(gridSize);\n  }\n\n  return arr;\n};\n\nconst peak = 0;\n\nfunction App() {\n  _s();\n\n  var foodAte = false; // Setting States\n\n  const [arr, setArr] = useState(arrInitialize);\n  const [dots, setDots] = useState([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);\n  const [delay, setDelay] = useState(speed);\n  const [food, setFood] = useState([10, 10]);\n  const [direction, setDirection] = useState(\"RIGHT\"); // Array Functions\n\n  function arrErase(anyArr) {\n    let thisArr = [...anyArr];\n\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        thisArr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 33\n        }, this);\n      }\n    }\n\n    return thisArr;\n  } // Snake\n\n\n  function snakeMove() {\n    let snakeDots = [...dots];\n    let head = snakeDots[snakeDots.length - 1];\n\n    switch (direction) {\n      case \"RIGHT\":\n        head = [head[0] + 1, head[1]];\n        break;\n\n      case \"DOWN\":\n        head = [head[0], head[1] + 1];\n        break;\n\n      case \"LEFT\":\n        head = [head[0] - 1, head[1]];\n        break;\n\n      case \"UP\":\n        head = [head[0], head[1] - 1];\n        break;\n    }\n\n    checkForFood(head);\n    snakeDots.push(head);\n\n    if (foodAte === false) {\n      snakeDots.shift();\n    } else {\n      setFood(randomNumber(gridSize - 1, 0));\n      foodAte = false;\n    }\n\n    if (checkHitBoundary(head) || checkHitBody(head)) return;else {\n      setDots(snakeDots);\n    }\n  } // Snake Update\n\n\n  function update() {\n    let array = arrErase(arr); // Snake add\n\n    for (let i = 0; i < dots.length; i++) {\n      array[dots[i][0]][dots[i][1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 45\n      }, this);\n    } // Food add\n\n\n    array[food[0]][food[1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 35\n    }, this);\n    setArr(array);\n  } // Keyboard Event\n\n\n  function logKey(e) {\n    // setDelay(prevState => prevState / 2)\n    switch (e.key) {\n      case \"ArrowUp\":\n        // if (direction!==\"DOWN\"){\n        console.log(direction);\n        setDirection(\"UP\");\n        console.log(direction); // }\n\n        break;\n\n      case \"ArrowDown\":\n        // if (direction!==\"UP\"){\n        setDirection(\"DOWN\"); // }\n\n        break;\n\n      case \"ArrowLeft\":\n        // if (direction!==\"RIGHT\"){\n        setDirection(\"LEFT\"); // }\n\n        break;\n\n      case \"ArrowRight\":\n        // if (direction!==\"LEFT\"){\n        setDirection(\"RIGHT\"); // }\n\n        break;\n    }\n  } // LifeCycle Functions\n\n\n  useInterval(() => {\n    snakeMove();\n  }, delay);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", logKey);\n    setArr(arrErase(arr));\n  }, []);\n  useEffect(() => {\n    update();\n  }, [dots]); // Cheker Functions\n\n  function checkHitBoundary(head) {\n    if (head[0] > 39 || head[0] < 0) {\n      gameReset();\n      return true;\n    } else if (head[1] > 39 || head[1] < 0) {\n      gameReset();\n      return true;\n    } else return false;\n  }\n\n  function checkHitBody(head) {\n    for (let i = 1; i < dots.length; i++) {\n      if (dots[i][0] === head[0] && dots[i][1] === head[1]) {\n        gameReset();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function checkForFood(head) {\n    if (head[0] === food[0] && head[1] === food[1]) {\n      foodAte = true;\n      return true;\n    }\n\n    return false;\n  } // Game Functions \n\n\n  function gameReset() {\n    setArr(arrErase(arr));\n    setDelay(speed);\n    setDirection(\"RIGHT\");\n    setDots([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: Grid(arr)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"H7Hfx86KkvXVYb5BcUZJ7GMRp7g=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","useState","useEffect","useRef","Grid","useInterval","randomNumber","speed","gridSize","arrInitialize","arr","Array","i","peak","App","foodAte","setArr","dots","setDots","delay","setDelay","food","setFood","direction","setDirection","arrErase","anyArr","thisArr","j","snakeMove","snakeDots","head","length","checkForFood","push","shift","checkHitBoundary","checkHitBody","update","array","logKey","e","key","console","log","document","addEventListener","gameReset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport { Grid } from \"./Grid\"\nimport { useInterval } from \"./useInterval\"\nimport { randomNumber } from \"./randomNumber\"\n\nconst speed=150\nconst gridSize= 40\n\nconst arrInitialize = () => {\n    let arr = new Array(gridSize)\n\n    for (let i=0; i<gridSize ; i++){\n        arr[i] = new Array(gridSize)\n    }\n\n    return arr\n}\n\nconst peak=0\n\n\nfunction App() {\n\n    var foodAte = false\n    // Setting States\n    const [arr, setArr] = useState(arrInitialize)\n    const [dots, setDots] = useState([[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]])\n    const [delay, setDelay] = useState(speed)\n    const [food, setFood] = useState([10,10])\n    const [direction, setDirection] = useState(\"RIGHT\")\n\n\n\n    // Array Functions\n\n    function arrErase(anyArr) {\n        let thisArr = [...anyArr]\n\n        for (let i=0 ; i<gridSize ; i++) {\n            for (let j=0 ; j<gridSize ; j++) {\n                thisArr[i][j] = <div className=\"block\"></div>\n            }\n        }\n        return thisArr\n    }\n\n    // Snake\n    function snakeMove(){\n        let snakeDots = [...dots]\n        let head = snakeDots[snakeDots.length - 1]\n\n        switch (direction) {\n            case \"RIGHT\":\n                head = [head[0] + 1, head[1]]\n                break\n            case \"DOWN\":\n                head = [head[0], head[1] + 1]\n                break\n            case \"LEFT\":\n                head = [head[0] - 1, head[1]]\n                break\n            case \"UP\":\n                head = [head[0], head[1] - 1]\n                break\n        }\n\n        checkForFood(head)\n        snakeDots.push(head)\n        if (foodAte===false){\n            snakeDots.shift()\n        } \n        else {\n            setFood(randomNumber(gridSize-1,0))\n            foodAte=false\n        }\n        \n        \n        if (\n            checkHitBoundary(head) ||\n            checkHitBody(head)\n        ) return\n\n        else{\n            setDots(snakeDots)\n        }\n        \n    }\n\n    // Snake Update\n\n    function update(){\n\n        let array = arrErase(arr)\n\n        // Snake add\n        for (let i=0; i<dots.length; i++) {\n            array[dots[i][0]][dots[i][1]] = <div className=\"dot\"></div>\n        }\n\n        // Food add\n\n        array[food[0]][food[1]] = <div className=\"dot\"></div>\n\n        \n        setArr(array)\n    }\n\n    // Keyboard Event\n    function logKey(e){\n        // setDelay(prevState => prevState / 2)\n\n        switch (e.key) {\n            case \"ArrowUp\":\n                // if (direction!==\"DOWN\"){\n                    console.log(direction)\n                    setDirection(\"UP\")\n                    console.log(direction)\n                    \n                // }\n                break\n            case \"ArrowDown\":\n                // if (direction!==\"UP\"){\n                    setDirection(\"DOWN\")\n                // }\n                break\n            case \"ArrowLeft\":\n                // if (direction!==\"RIGHT\"){\n                    setDirection(\"LEFT\")\n                // }\n                break\n            case \"ArrowRight\":\n                // if (direction!==\"LEFT\"){\n                    setDirection(\"RIGHT\")\n                // }\n                break\n        }\n    }\n\n\n    // LifeCycle Functions\n\n    useInterval(() => {\n        snakeMove()\n    } ,delay)\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\",logKey)\n        setArr(arrErase(arr))\n    },[])\n\n\n    useEffect(() => {        \n        update()\n    },[dots])\n\n\n\n    // Cheker Functions\n\n    function checkHitBoundary(head){\n        if (head[0]>39 || head[0]<0) {\n            gameReset()\n            return true\n        }\n        else if (head[1]>39 || head[1]<0) {\n            gameReset()\n            return true\n        }\n        else return false\n    }\n\n    function checkHitBody(head){\n\n        for (let i=1 ; i < dots.length ; i++) {\n            if ((dots[i][0]===head[0]) && (dots[i][1]===head[1])) {\n                gameReset()\n                return true\n            }\n        }\n        return false\n    }\n\n    function checkForFood(head){\n        if ((head[0]===food[0]) && (head[1]===food[1])) {\n            foodAte = true\n            return true\n        }\n        return false\n    }\n\n    // Game Functions \n\n    function gameReset(){\n        setArr(arrErase(arr))\n        setDelay(speed)\n        setDirection(\"RIGHT\")\n        setDots([[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]])\n        \n    }\n\n\n\n        \n\n\n\n    return(\n        <div className=\"container\">\n            {Grid(arr)}\n        </div>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}