{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"./Grid\";\nimport { useInterval } from \"./useInterval\";\nimport { randomNumber } from \"./randomNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst speed = 100;\nconst gridSize = 40;\n\nconst arrInitialize = () => {\n  let arr = new Array(gridSize);\n\n  for (let i = 0; i < gridSize; i++) {\n    arr[i] = new Array(gridSize);\n  }\n\n  return arr;\n};\n\nfunction App() {\n  _s();\n\n  var foodAte = false; // Setting States\n\n  const [arr, setArr] = useState(arrInitialize);\n  const [dots, setDots] = useState([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);\n  const [delay, setDelay] = useState(speed);\n  const [food, setFood] = useState([10, 10]);\n  const [direction, setDirection] = useState(\"RIGHT\"); // Array Functions\n\n  function arrErase(anyArr) {\n    let thisArr = [...anyArr];\n\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        thisArr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 33\n        }, this);\n      }\n    }\n\n    return thisArr;\n  } // Snake\n\n\n  function snakeMove() {\n    console.log(delay);\n    let snakeDots = [...dots];\n    let head = snakeDots[snakeDots.length - 1];\n\n    switch (direction) {\n      case \"RIGHT\":\n        head = [head[0] + 1, head[1]];\n        break;\n\n      case \"DOWN\":\n        head = [head[0], head[1] + 1];\n        break;\n\n      case \"LEFT\":\n        head = [head[0] - 1, head[1]];\n        break;\n\n      case \"UP\":\n        head = [head[0], head[1] - 1];\n        break;\n\n      default:\n        break;\n    }\n\n    checkForFood(head);\n    snakeDots.push(head);\n\n    if (foodAte === false) {\n      snakeDots.shift();\n    } else {\n      setDelay(prevState => prevState * 0.9);\n      setFood(randomNumber(gridSize - 1, 0));\n      foodAte = false;\n    }\n\n    if (checkHitBoundary(head) || checkHitBody(head)) return;else {\n      setDots(snakeDots);\n    }\n  } // Snake Update\n\n\n  function update() {\n    let array = arrErase(arr); // Snake add\n\n    for (let i = 0; i < dots.length; i++) {\n      array[dots[i][0]][dots[i][1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 45\n      }, this);\n    } // Food add\n\n\n    array[food[0]][food[1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 35\n    }, this);\n    setArr(array);\n  } // Keyboard Event\n\n\n  function logKey(e) {\n    switch (e.key) {\n      case \"ArrowUp\":\n        setDirection(prevState => {\n          if (prevState === \"DOWN\") {\n            return prevState;\n          } else return \"UP\";\n        });\n        break;\n\n      case \"ArrowDown\":\n        setDirection(prevState => {\n          if (prevState === \"UP\") {\n            return prevState;\n          } else return \"DOWN\";\n        });\n        break;\n\n      case \"ArrowLeft\":\n        setDirection(prevState => {\n          if (prevState === \"RIGHT\") {\n            return prevState;\n          } else return \"LEFT\";\n        });\n        break;\n\n      case \"ArrowRight\":\n        setDirection(prevState => {\n          if (prevState === \"LEFT\") {\n            return prevState;\n          } else return \"RIGHT\";\n        });\n        break;\n\n      default:\n        break;\n    }\n  } // LifeCycle Functions\n\n\n  useInterval(() => {\n    snakeMove();\n  }, delay);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", logKey);\n    setArr(arrErase(arr));\n  }, []);\n  useEffect(() => {\n    update();\n  }, [dots]); // Cheker Functions\n\n  function checkHitBoundary(head) {\n    if (head[0] > 39 || head[0] < 0) {\n      gameReset();\n      return true;\n    } else if (head[1] > 39 || head[1] < 0) {\n      gameReset();\n      return true;\n    } else return false;\n  }\n\n  function checkHitBody(head) {\n    for (let i = 1; i < dots.length; i++) {\n      if (dots[i][0] === head[0] && dots[i][1] === head[1]) {\n        gameReset();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function checkForFood(head) {\n    if (head[0] === food[0] && head[1] === food[1]) {\n      foodAte = true;\n      return true;\n    }\n\n    return false;\n  } // Game Functions \n\n\n  function gameReset() {\n    setArr(arrErase(arr));\n    setDelay(speed);\n    setDirection(\"RIGHT\");\n    setDots([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);\n    alert(\"You are an asshole!!!\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: Grid(arr)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"H7Hfx86KkvXVYb5BcUZJ7GMRp7g=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","useState","useEffect","Grid","useInterval","randomNumber","speed","gridSize","arrInitialize","arr","Array","i","App","foodAte","setArr","dots","setDots","delay","setDelay","food","setFood","direction","setDirection","arrErase","anyArr","thisArr","j","snakeMove","console","log","snakeDots","head","length","checkForFood","push","shift","prevState","checkHitBoundary","checkHitBody","update","array","logKey","e","key","document","addEventListener","gameReset","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Grid } from \"./Grid\"\nimport { useInterval } from \"./useInterval\"\nimport { randomNumber } from \"./randomNumber\"\n\nconst speed=100\nconst gridSize= 40\n\nconst arrInitialize = () => {\n    let arr = new Array(gridSize)\n\n    for (let i=0; i<gridSize ; i++){\n        arr[i] = new Array(gridSize)\n    }\n\n    return arr\n}\n\n\nfunction App() {\n\n    var foodAte = false\n    // Setting States\n    const [arr, setArr] = useState(arrInitialize)\n    const [dots, setDots] = useState([[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]])\n    const [delay, setDelay] = useState(speed)\n    const [food, setFood] = useState([10,10])\n    const [direction, setDirection] = useState(\"RIGHT\")\n\n\n\n    // Array Functions\n\n    function arrErase(anyArr) {\n        let thisArr = [...anyArr]\n\n        for (let i=0 ; i<gridSize ; i++) {\n            for (let j=0 ; j<gridSize ; j++) {\n                thisArr[i][j] = <div className=\"block\"></div>\n            }\n        }\n        return thisArr\n    }\n\n    // Snake\n    function snakeMove(){\n        console.log(delay)\n        let snakeDots = [...dots]\n        let head = snakeDots[snakeDots.length - 1]\n\n        switch (direction) {\n            case \"RIGHT\":\n                head = [head[0] + 1, head[1]]\n                break\n            case \"DOWN\":\n                head = [head[0], head[1] + 1]\n                break\n            case \"LEFT\":\n                head = [head[0] - 1, head[1]]\n                break\n            case \"UP\":\n                head = [head[0], head[1] - 1]\n                break\n            default:\n                break\n        }\n\n        checkForFood(head)\n        snakeDots.push(head)\n        if (foodAte===false){\n            snakeDots.shift()\n        } \n        else {\n            setDelay(prevState => prevState * 0.9)\n            setFood(randomNumber(gridSize-1,0))\n            foodAte=false\n        }\n        \n        \n        if (\n            checkHitBoundary(head) ||\n            checkHitBody(head)\n        ) return\n\n        else{\n            setDots(snakeDots)\n        }\n        \n    }\n\n    // Snake Update\n\n    function update(){\n\n        let array = arrErase(arr)\n\n        // Snake add\n        for (let i=0; i<dots.length; i++) {\n            array[dots[i][0]][dots[i][1]] = <div className=\"dot\"></div>\n        }\n\n        // Food add\n\n        array[food[0]][food[1]] = <div className=\"dot\"></div>\n\n        \n        setArr(array)\n    }\n\n    // Keyboard Event\n    function logKey(e){\n        switch (e.key) {\n            case \"ArrowUp\":\n                setDirection(prevState =>{\n                    if (prevState===\"DOWN\") {\n                        return prevState\n                    }\n                    else return \"UP\"\n                })\n                break\n            case \"ArrowDown\":\n                setDirection(prevState =>{\n                    if (prevState===\"UP\") {\n                        return prevState\n                    }\n                    else return \"DOWN\"\n                })\n                break\n            case \"ArrowLeft\":\n                setDirection(prevState =>{\n                    if (prevState===\"RIGHT\") {\n                        return prevState\n                    }\n                    else return \"LEFT\"\n                })\n                break\n            case \"ArrowRight\":\n                setDirection(prevState =>{\n                    if (prevState===\"LEFT\") {\n                        return prevState\n                    }\n                    else return \"RIGHT\"\n                })\n                break\n            default:\n                break\n        }\n    }\n\n\n    // LifeCycle Functions\n\n    useInterval(() => {\n        snakeMove()\n    } ,delay)\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\",logKey)\n        setArr(arrErase(arr))\n    },[])\n\n    useEffect(() => {        \n        update()\n    },[dots])\n\n\n\n    // Cheker Functions\n\n    function checkHitBoundary(head){\n        if (head[0]>39 || head[0]<0) {\n            gameReset()\n            return true\n        }\n        else if (head[1]>39 || head[1]<0) {\n            gameReset()\n            return true\n        }\n        else return false\n    }\n\n    function checkHitBody(head){\n\n        for (let i=1 ; i < dots.length ; i++) {\n            if ((dots[i][0]===head[0]) && (dots[i][1]===head[1])) {\n                gameReset()\n                return true\n            }\n        }\n        return false\n    }\n\n    function checkForFood(head){\n        if ((head[0]===food[0]) && (head[1]===food[1])) {\n            foodAte = true\n            return true\n        }\n        return false\n    }\n\n    // Game Functions \n\n    function gameReset(){\n        setArr(arrErase(arr))\n        setDelay(speed)\n        setDirection(\"RIGHT\")\n        setDots([[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]])\n        alert(\"You are an asshole!!!\")\n        \n    }\n\n\n\n        \n\n\n\n    return(\n        <div className=\"container\">\n            {Grid(arr)}\n        </div>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}