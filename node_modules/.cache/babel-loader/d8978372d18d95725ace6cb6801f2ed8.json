{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\";\nimport React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [[]],\n      count: 0,\n      //From Snake.js\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      direction: \"RIGHT\",\n      directionUpdate: true,\n      //From Snake.js\n      //From Food.js\n      location: this.randomLocation(),\n      foodAte: false //From Food.js\n\n    };\n    this.setArr = this.setArr.bind(this); //From Snake.js\n\n    this.snakeMove = this.snakeMove.bind(this);\n    this.snakeUpdate = this.snakeUpdate.bind(this);\n    this.moveUp = this.moveUp.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.moveDown = this.moveDown.bind(this);\n    this.moveLeft = this.moveLeft.bind(this);\n    this.eventHandler = this.eventHandler.bind(this); //From Snake.js\n    //From Food.js\n\n    this.randomLocation = this.randomLocation.bind(this);\n    this.foodUpdate = this.foodUpdate.bind(this); //From Food.js\n\n    this.eraseGrid = this.eraseGrid.bind(this);\n    this.refillGrid = this.refillGrid.bind(this);\n    this.intialFill = this.intialFill.bind(this);\n  }\n\n  setArr(array) {\n    this.setState({\n      arr: array\n    });\n  }\n\n  intialFill() {\n    var size = 40;\n    this.state.arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      this.state.arr[i] = new Array(size);\n    }\n  } //From Snake.js\n\n\n  eraseGrid() {\n    for (let i = 0; i < this.state.arr.length; i++) {\n      for (let j = 0; j < this.state.arr.length; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 39\n        }, this);\n      }\n    }\n  }\n\n  refillGrid(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      let x = arr[i][0];\n      let y = arr[i][1];\n      this.state.arr[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 34\n      }, this);\n    }\n  }\n\n  snakeUpdate() {\n    // Fixed!!!\n    this.eraseGrid(); // Fixed!!!\n    // Snake update\n\n    this.refillGrid(this.state.dots); // Snake \n    //Food Update\n\n    this.refillGrid(this.state.location); //Food Update\n\n    this.setArr(this.state.arr);\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      case \"UP\":\n        this.moveUp();\n        break;\n\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n\n      case \"DOWN\":\n        this.moveDown();\n        break;\n\n      case \"LEFT\":\n        this.moveLeft();\n        break;\n    }\n\n    this.snakeUpdate();\n  }\n\n  moveRight() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveDown() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] + 1]);\n    this.state.dots = tempArr;\n  }\n\n  moveLeft() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] - 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveUp() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] - 1]);\n    this.state.dots = tempArr;\n  }\n\n  eventHandler(e) {\n    if (!this.state.directionUpdate) return;\n\n    switch (e.code) {\n      case \"ArrowRight\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"RIGHT\";\n        break;\n\n      case \"ArrowDown\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"DOWN\";\n        break;\n\n      case \"ArrowLeft\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"LEFT\";\n        break;\n\n      case \"ArrowUp\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"UP\";\n        break;\n    }\n\n    this.state.directionUpdate = false;\n  }\n\n  componentDidMount() {\n    intialFill();\n    setInterval(this.snakeMove, 100);\n    window.addEventListener(\"keydown\", this.eventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.eventHandler);\n  } //From Snake.js\n  //From Food.js\n\n\n  randomLocation() {\n    return [Math.floor(Math.random() * (40 - 0)) + 0, Math.floor(Math.random() * (40 - 0)) + 0];\n  }\n\n  foodUpdate() {\n    // Fixed!!!\n    // for (let i=0;i<this.props.arr.length;i++){\n    //     for (let j=0;j<this.props.arr.length;j++){\n    //         this.props.arr[i][j]= <div className=\"block\"></div>;\n    //     }\n    // }\n    // Fixed!!!\n    // Food update\n    let some = this.state.arr;\n    let x = this.state.location[0];\n    let y = this.state.location[1];\n    some[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }, this); // Food \n\n    this.setArr(some);\n  }\n\n  componentDidUpdate() {\n    console.log(\"This updated!!!!\"); // this.foodUpdate();\n  } //From Food.js\n\n\n  render() {\n    this.state.directionUpdate = true;\n\n    if (this.state.count === 0) {\n      this.state.count++;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        arr: this.state.arr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","Component","Grid","App","constructor","props","state","arr","count","dots","direction","directionUpdate","location","randomLocation","foodAte","setArr","bind","snakeMove","snakeUpdate","moveUp","moveRight","moveDown","moveLeft","eventHandler","foodUpdate","eraseGrid","refillGrid","intialFill","array","setState","size","Array","i","length","j","x","y","tempArr","shift","push","e","code","componentDidMount","setInterval","window","addEventListener","componentWillUnmount","removeEventListener","Math","floor","random","some","componentDidUpdate","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport Grid from \"./Grid\"\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n\n        this.state={\n            arr:[[]],\n            count: 0,\n            //From Snake.js\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            direction: \"RIGHT\",\n            directionUpdate: true,\n            //From Snake.js\n\n            //From Food.js\n            location: this.randomLocation(),\n            foodAte: false\n            //From Food.js\n        }\n\n        this.setArr=this.setArr.bind(this);\n\n        //From Snake.js\n        this.snakeMove=this.snakeMove.bind(this);\n        this.snakeUpdate=this.snakeUpdate.bind(this);\n\n        this.moveUp=this.moveUp.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        this.moveDown=this.moveDown.bind(this);\n        this.moveLeft=this.moveLeft.bind(this);\n\n        this.eventHandler=this.eventHandler.bind(this);\n        //From Snake.js\n\n        //From Food.js\n        this.randomLocation=this.randomLocation.bind(this);\n        this.foodUpdate=this.foodUpdate.bind(this);\n        //From Food.js\n\n        this.eraseGrid=this.eraseGrid.bind(this);\n        this.refillGrid=this.refillGrid.bind(this);\n\n        this.intialFill=this.intialFill.bind(this);\n        \n    }\n\n    setArr(array){\n        this.setState({\n            arr: array\n        })\n    }\n    \n    intialFill(){\n        var size = 40;\n        this.state.arr = new Array(size);\n\n        for (let i=0;i<size;i++){\n            this.state.arr[i] = new Array(size);\n        }\n    }\n\n    //From Snake.js\n\n    eraseGrid(){\n        for (let i=0;i<this.state.arr.length;i++){\n            for (let j=0;j<this.state.arr.length;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n    }\n\n    refillGrid(arr){\n       for (let i=0; i<arr.length;i++){\n           let x = arr[i][0];\n           let y = arr[i][1];\n\n           this.state.arr[x][y]= <div className=\"dot\"></div>;\n       }\n    }\n\n    snakeUpdate(){\n        // Fixed!!!\n        this.eraseGrid();\n        // Fixed!!!\n        // Snake update\n        this.refillGrid(this.state.dots);\n        // Snake \n        //Food Update\n        this.refillGrid(this.state.location);\n        //Food Update\n        \n        this.setArr(this.state.arr);\n   }\n\n   snakeMove() {\n\n        switch (this.state.direction){\n            case \"UP\":\n                this.moveUp();\n                break;\n            case \"RIGHT\":\n                this.moveRight();\n                break;\n            case \"DOWN\":\n                this.moveDown();\n                break;\n            case \"LEFT\":\n                this.moveLeft();\n                break;\n        }  \n        this.snakeUpdate();    \n    }\n\n    moveRight(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveDown(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]+1]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveLeft(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0]-1,tempArr[tempArr.length-1][1]]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveUp(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]-1]);\n\n        this.state.dots=tempArr;\n    }\n\n   eventHandler(e){\n\n    if(!this.state.directionUpdate) return;\n\n    switch(e.code){\n        case \"ArrowRight\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"RIGHT\";\n            break;\n        case \"ArrowDown\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"DOWN\";\n            break;\n        case \"ArrowLeft\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"LEFT\";\n            break;\n        case \"ArrowUp\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"UP\";\n            break;\n        }\n        this.state.directionUpdate=false;\n    }\n\n    componentDidMount(){   \n        intialFill(); \n        setInterval(this.snakeMove,100);\n        window.addEventListener(\"keydown\",this.eventHandler);\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener(\"keydown\",this.eventHandler);\n    }\n\n\n    //From Snake.js\n\n    //From Food.js\n    randomLocation(){\n        return [Math.floor(Math.random() * (40 - 0)) + 0,Math.floor(Math.random() * (40 - 0)) + 0];\n    }\n\n    foodUpdate(){\n        // Fixed!!!\n        // for (let i=0;i<this.props.arr.length;i++){\n        //     for (let j=0;j<this.props.arr.length;j++){\n        //         this.props.arr[i][j]= <div className=\"block\"></div>;\n        //     }\n        // }\n        // Fixed!!!\n       // Food update\n        let some=this.state.arr;\n\n        let x = this.state.location[0];\n        let y = this.state.location[1];\n\n        some[x][y]= <div className=\"dot\"></div>;\n       \n        // Food \n        this.setArr(some);\n   };\n\n   componentDidUpdate(){\n       console.log(\"This updated!!!!\");\n        // this.foodUpdate();\n   }\n    //From Food.js\n     \n\n    render(){\n        this.state.directionUpdate=true;\n\n        if (this.state.count===0){\n            this.state.count++;\n        }\n    \n\n        return(\n            \n            <div className=\"container\">\n                <Grid arr={this.state.arr}/>\n            </div>\n            \n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}