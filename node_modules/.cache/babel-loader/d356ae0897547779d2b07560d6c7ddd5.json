{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\";\nimport React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      arr: [[]],\n      direction: \"RIGHT\",\n      directionUpdate: true\n    };\n    this.snakeMove = this.snakeMove.bind(this);\n    this.snakeUpdate = this.snakeUpdate.bind(this);\n    this.moveUp = this.moveUp.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.moveDown = this.moveDown.bind(this);\n    this.moveLeft = this.moveLeft.bind(this);\n    this.eventHandler = this.eventHandler.bind(this);\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      case \"UP\":\n        this.moveUp();\n        break;\n\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n\n      case \"DOWN\":\n        this.moveDown();\n        break;\n\n      case \"LEFT\":\n        this.moveLeft();\n        break;\n    }\n  }\n\n  moveRight() {\n    let tempArr = this.props.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.props.setDots(tempArr);\n  }\n\n  moveDown() {\n    let tempArr = this.props.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] + 1]);\n    this.props.setDots(tempArr);\n  }\n\n  moveLeft() {\n    let tempArr = this.props.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] - 1, tempArr[tempArr.length - 1][1]]);\n    this.props.setDots(tempArr);\n  }\n\n  moveUp() {\n    let tempArr = this.props.dots;\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] - 1]);\n    this.props.setDots(tempArr);\n  }\n\n  snakeUpdate() {\n    // Snake update\n    let som = this.props.dots;\n\n    for (let i = 0; i < som.length; i++) {\n      let x = this.props.dots[i][0];\n      let y = this.props.dots[i][1];\n      this.state.arr[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 34\n      }, this);\n    } // Snake update\n\n  }\n\n  eventHandler(e) {\n    console.log(\"Some key Pressed!!!!\");\n    console.log(e.code);\n    if (!this.state.directionUpdate) return;\n\n    switch (e.code) {\n      case \"ArrowRight\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"RIGHT\";\n        break;\n\n      case \"ArrowDown\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"DOWN\";\n        break;\n\n      case \"ArrowLeft\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"LEFT\";\n        break;\n\n      case \"ArrowUp\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"UP\";\n        break;\n    }\n\n    this.state.directionUpdate = false;\n  }\n\n  componentDidMount() {\n    this.snakeUpdate(); // console.log(this.props.dots);\n    // this.snakeMove();\n\n    setInterval(this.snakeMove, 100);\n    window.addEventListener(\"keydown\", this.eventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.eventHandler);\n  }\n\n  render() {\n    this.state.directionUpdate = true; // Fixed!!!\n\n    var size = 40;\n    this.state.arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      this.state.arr[i] = new Array(size);\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 39\n        }, this);\n      }\n    } // Fixed!!!\n\n\n    this.snakeUpdate();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.arr.map(row => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this) // <div className=\"container\">\n    // <Grid dots={this.state.dots}\n    // setDots={this.setDots}/>\n    // <Snake />\n    // {/* <Food /> */}\n    // </div>\n    ;\n  }\n\n}\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","Component","Snake","Food","Grid","constructor","props","state","dots","arr","direction","directionUpdate","snakeMove","bind","snakeUpdate","moveUp","moveRight","moveDown","moveLeft","eventHandler","tempArr","shift","push","length","setDots","som","i","x","y","e","console","log","code","componentDidMount","setInterval","window","addEventListener","componentWillUnmount","removeEventListener","render","size","Array","j","map","row"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport Snake from \"./Snake\";\nimport Food from \"./Food\"\n\nclass Grid extends Component{\n    constructor(props){\n        super(props);\n\n        \n\n        this.state={\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            arr:[[]],\n            direction: \"RIGHT\",\n            directionUpdate: true\n        }\n\n        this.snakeMove=this.snakeMove.bind(this);\n        this.snakeUpdate=this.snakeUpdate.bind(this);\n\n        this.moveUp=this.moveUp.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        this.moveDown=this.moveDown.bind(this);\n        this.moveLeft=this.moveLeft.bind(this);\n        this.eventHandler=this.eventHandler.bind(this);\n    }\n\n    snakeMove() {\n\n        switch (this.state.direction){\n            case \"UP\":\n                this.moveUp();\n                break;\n            case \"RIGHT\":\n                this.moveRight();\n                break;\n            case \"DOWN\":\n                this.moveDown();\n                break;\n            case \"LEFT\":\n                this.moveLeft();\n                break;\n        }            \n    }\n\n    moveRight(){\n        let tempArr=this.props.dots;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n\n        this.props.setDots(tempArr);\n    }\n\n    moveDown(){\n        let tempArr=this.props.dots;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]+1]);\n\n        this.props.setDots(tempArr);\n    }\n\n    moveLeft(){\n        let tempArr=this.props.dots;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0]-1,tempArr[tempArr.length-1][1]]);\n\n        this.props.setDots(tempArr);\n    }\n\n    moveUp(){\n        let tempArr=this.props.dots;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]-1]);\n\n        this.props.setDots(tempArr);\n    }\n\n   snakeUpdate(){\n       // Snake update\n       let som=this.props.dots;\n       for (let i=0; i<som.length;i++){\n           let x = this.props.dots[i][0];\n           let y = this.props.dots[i][1];\n\n           this.state.arr[x][y]= <div className=\"dot\"></div>;\n       }\n       // Snake update\n   }\n\n   eventHandler(e){\n        console.log(\"Some key Pressed!!!!\");\n        console.log(e.code);\n\n        if(!this.state.directionUpdate) return;\n\n        switch(e.code){\n            case \"ArrowRight\":\n                if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n                this.state.direction = \"RIGHT\";\n                break;\n            case \"ArrowDown\":\n                if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n                this.state.direction = \"DOWN\";\n                break;\n            case \"ArrowLeft\":\n                if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n                this.state.direction = \"LEFT\";\n                break;\n            case \"ArrowUp\":\n                if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n                this.state.direction = \"UP\";\n                break;\n        }\n        this.state.directionUpdate=false;\n   }\n\n    componentDidMount(){   \n        this.snakeUpdate();\n        // console.log(this.props.dots);\n        // this.snakeMove();\n        setInterval(this.snakeMove,100);\n        window.addEventListener(\"keydown\",this.eventHandler);\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener(\"keydown\",this.eventHandler);\n    }\n     \n\n    render(){\n        this.state.directionUpdate=true;\n        // Fixed!!!\n        var size = 40;\n        this.state.arr = new Array(size);\n\n        for (let i=0;i<size;i++){\n            this.state.arr[i] = new Array(size);\n        }\n\n        for (let i=0;i<size;i++){\n            for (let j=0;j<size;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n        // Fixed!!!\n\n        this.snakeUpdate(); \n\n\n        return(\n            <div>\n                {this.state.arr.map((row) => {\n                    return (\n                        <div className=\"row\">\n                            {row}\n                        </div>\n                    )\n                })}\n            </div>\n            \n            // <div className=\"container\">\n            // <Grid dots={this.state.dots}\n            // setDots={this.setDots}/>\n            // <Snake />\n            // {/* <Food /> */}\n            // </div>\n            \n        )\n    }\n}\n\n\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}