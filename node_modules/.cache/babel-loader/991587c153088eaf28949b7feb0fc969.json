{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/App.js\";\nimport React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: 40,\n      speed: 250,\n      arr: [[]],\n      count: 0,\n      //From Snake.js\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      direction: \"RIGHT\",\n      tailDirection: \"\",\n      directionUpdate: true,\n      //From Snake.js\n      //From Food.js\n      location: [],\n      foodAte: false //From Food.js\n\n    };\n    this.bodyHit = this.bodyHit.bind(this);\n    this.cellCompare = this.cellCompare.bind(this);\n    this.setArr = this.setArr.bind(this);\n    this.gameReset = this.gameReset.bind(this); //From Snake.js\n\n    this.snakeMove = this.snakeMove.bind(this);\n    this.snakeUpdate = this.snakeUpdate.bind(this);\n    this.moveUp = this.moveUp.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.moveDown = this.moveDown.bind(this);\n    this.moveLeft = this.moveLeft.bind(this);\n    this.eventHandler = this.eventHandler.bind(this);\n    this.snakeGrow = this.snakeGrow.bind(this);\n    this.getTailDirection = this.getTailDirection.bind(this); //From Snake.js\n    //From Food.js\n\n    this.randomLocation = this.randomLocation.bind(this); //From Food.js\n\n    this.eraseGrid = this.eraseGrid.bind(this);\n    this.refillGrid = this.refillGrid.bind(this);\n    this.intialFill = this.intialFill.bind(this);\n    this.checkFood = this.checkFood.bind(this);\n    this.getHead = this.getHead.bind(this);\n    this.boundaryHit = this.boundaryHit.bind(this);\n  }\n\n  gameReset() {\n    this.eraseGrid();\n    this.setState({\n      dots: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],\n      direction: \"RIGHT\",\n      directionUpdate: true,\n      //From Snake.js\n      //From Food.js\n      location: this.randomLocation()\n    });\n  }\n\n  setArr(array) {\n    this.setState({\n      arr: array,\n      dots: this.state.dots\n    });\n  }\n\n  intialFill() {\n    this.state.arr = new Array(this.state.size);\n\n    for (let i = 0; i < this.state.size; i++) {\n      this.state.arr[i] = new Array(this.state.size);\n    }\n\n    for (let i = 0; i < this.state.size; i++) {\n      for (let j = 0; j < this.state.size; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 39\n        }, this);\n      }\n    }\n  } //From Snake.js\n\n\n  snakeUpdate() {\n    this.checkFood();\n    this.bodyHit();\n    this.boundaryHit();\n    this.eraseGrid(); // Snake Entry to arr\n\n    this.refillGrid(this.state.dots); //Food Entry to arr\n\n    this.refillGrid(this.state.location);\n    console.log(\"Speed is: \" + this.state.speed);\n    console.log(\"Length is: \" + this.state.dots.length);\n    this.setArr(this.state.arr);\n  }\n\n  getTailDirection() {\n    if (this.state.dots.length >= 2) {\n      let last = this.state.dots[0];\n      let slast = this.state.dots[1];\n\n      if (slast[0] - last[0] === 1) {\n        return \"LEFT\";\n      } else if (slast[0] - last[0] === -1) {\n        return \"RIGHT\";\n      } else if (slast[1] - last[1] === 1) {\n        return \"UP\";\n      } else if (slast[0] - last[0] === -1) {\n        return \"DOWN\";\n      }\n    }\n  }\n\n  cellCompare(cell1, cell2) {\n    return cell1[0] === cell2[0] && cell1[1] === cell2[1];\n  }\n\n  snakeGrow() {\n    let tail = this.state.dots[0];\n\n    switch (this.state.tailDirection) {\n      case \"RIGHT\":\n        // let some1=this.state.dots;\n        this.state.dots.unshift([tail[0] + 1, tail[1]]); // this.setState({dots: some1})\n\n        break;\n\n      case \"DOWN\":\n        // let some2=this.state.dots;\n        this.state.dots.unshift([tail[0], tail[1] + 1]); // this.setState({dots: some2})\n\n        break;\n\n      case \"LEFT\":\n        // let some3=this.state.dots;\n        this.state.dots.unshift([tail[0] - 1, tail[1]]); // this.setState({dots: some3})\n\n        break;\n\n      case \"UP\":\n        // let some4=this.state.dots;\n        this.state.dots.unshift([tail[0], tail[1] - 1]); // this.setState({dots: some4})\n\n        break;\n    }\n  }\n\n  eraseGrid() {\n    for (let i = 0; i < this.state.arr.length; i++) {\n      for (let j = 0; j < this.state.arr.length; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 39\n        }, this);\n      }\n    }\n  }\n\n  refillGrid(arr) {\n    if (arr[0][0] === undefined) {\n      this.state.arr[arr[0]][arr[1]] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 45\n      }, this);\n      return;\n    }\n\n    ;\n\n    for (let i = 0; i < arr.length; i++) {\n      let x = arr[i][0];\n      let y = arr[i][1];\n      this.state.arr[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 35\n      }, this);\n    }\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      case \"UP\":\n        this.moveUp();\n        break;\n\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n\n      case \"DOWN\":\n        this.moveDown();\n        break;\n\n      case \"LEFT\":\n        this.moveLeft();\n        break;\n    }\n\n    this.state.tailDirection = this.getTailDirection();\n    this.snakeUpdate();\n  }\n\n  moveRight() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveDown() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] + 1]);\n    this.state.dots = tempArr;\n  }\n\n  moveLeft() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] - 1, tempArr[tempArr.length - 1][1]]);\n    this.state.dots = tempArr;\n  }\n\n  moveUp() {\n    let tempArr = this.state.dots;\n    tempArr[0] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 20\n    }, this);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0], tempArr[tempArr.length - 1][1] - 1]);\n    this.state.dots = tempArr;\n  }\n\n  eventHandler(e) {\n    if (!this.state.directionUpdate) return;\n\n    switch (e.code) {\n      case \"ArrowRight\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"RIGHT\";\n        break;\n\n      case \"ArrowDown\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"DOWN\";\n        break;\n\n      case \"ArrowLeft\":\n        if (this.state.direction === \"RIGHT\" || this.state.direction === \"LEFT\") return;\n        this.state.direction = \"LEFT\";\n        break;\n\n      case \"ArrowUp\":\n        if (this.state.direction === \"DOWN\" || this.state.direction === \"UP\") return;\n        this.state.direction = \"UP\";\n        break;\n    }\n\n    this.state.directionUpdate = false;\n  }\n\n  componentDidMount() {\n    this.intialFill();\n    this.state.location = this.randomLocation();\n    this.interval = setInterval(this.snakeMove, this.state.speed);\n    window.addEventListener(\"keydown\", this.eventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.eventHandler);\n  }\n\n  componentWillUpdate(prevProps, prevState) {\n    if (prevState.speed !== this.state.speed) {\n      clearInterval(this.interval);\n      this.interval = setInterval(this.snakeMove, this.state.speed);\n    }\n  }\n\n  getHead() {\n    return this.state.dots[this.state.dots.length - 1];\n  } //From Snake.js\n  //From Food.js\n\n\n  checkFood() {\n    if (this.cellCompare(this.getHead(), this.state.location)) {\n      this.snakeGrow();\n      this.state.location = this.randomLocation();\n\n      if (this.state.speed > 50) {\n        this.setState({\n          speed: this.state.speed - 25\n        });\n      }\n    }\n  }\n\n  randomLocation() {\n    return [Math.floor(Math.random() * (this.state.size - 0)) + 0, Math.floor(Math.random() * (this.state.size - 0)) + 0];\n  } //From Food.js\n\n\n  bodyHit() {\n    let head = this.getHead();\n\n    for (let i = 0; i < this.state.dots.length - 1; i++) {\n      if (this.state.dots[i][0] === head[0] && this.state.dots[i][1] === head[1]) {\n        this.gameReset();\n      }\n    }\n\n    return null;\n  }\n\n  boundaryHit() {\n    let head = this.getHead();\n\n    if (head[0] < 0 || head[0] > this.state.size - 1 || head[1] < 0 || head[1] > this.state.size - 1) {\n      this.gameReset();\n    }\n  }\n\n  render() {\n    this.state.directionUpdate = true;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        arr: this.state.arr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/App.js"],"names":["React","Component","Grid","App","constructor","props","state","size","speed","arr","count","dots","direction","tailDirection","directionUpdate","location","foodAte","bodyHit","bind","cellCompare","setArr","gameReset","snakeMove","snakeUpdate","moveUp","moveRight","moveDown","moveLeft","eventHandler","snakeGrow","getTailDirection","randomLocation","eraseGrid","refillGrid","intialFill","checkFood","getHead","boundaryHit","setState","array","Array","i","j","console","log","length","last","slast","cell1","cell2","tail","unshift","undefined","x","y","tempArr","shift","push","e","code","componentDidMount","interval","setInterval","window","addEventListener","componentWillUnmount","removeEventListener","componentWillUpdate","prevProps","prevState","clearInterval","Math","floor","random","head","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,GAAN,SAAkBF,SAAlB,CAA2B;AACvBG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAE,EADC;AAEPC,MAAAA,KAAK,EAAE,GAFA;AAGPC,MAAAA,GAAG,EAAC,CAAC,EAAD,CAHG;AAIPC,MAAAA,KAAK,EAAE,CAJA;AAKP;AACAC,MAAAA,IAAI,EAAE,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,EAAO,CAAC,CAAD,EAAG,CAAH,CAAP,EAAa,CAAC,CAAD,EAAG,CAAH,CAAb,EAAmB,CAAC,CAAD,EAAG,CAAH,CAAnB,EAAyB,CAAC,CAAD,EAAG,CAAH,CAAzB,EAA+B,CAAC,CAAD,EAAG,CAAH,CAA/B,CANC;AAOPC,MAAAA,SAAS,EAAE,OAPJ;AAQPC,MAAAA,aAAa,EAAE,EARR;AASPC,MAAAA,eAAe,EAAE,IATV;AAUP;AAEA;AACAC,MAAAA,QAAQ,EAAE,EAbH;AAcPC,MAAAA,OAAO,EAAE,KAdF,CAeP;;AAfO,KAAX;AAiBA,SAAKC,OAAL,GAAa,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAb;AACA,SAAKC,WAAL,GAAiB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAjB;AACA,SAAKE,MAAL,GAAY,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAZ;AACA,SAAKG,SAAL,GAAe,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAf,CAvBc,CAyBd;;AACA,SAAKI,SAAL,GAAe,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAf;AACA,SAAKK,WAAL,GAAiB,KAAKA,WAAL,CAAiBL,IAAjB,CAAsB,IAAtB,CAAjB;AAEA,SAAKM,MAAL,GAAY,KAAKA,MAAL,CAAYN,IAAZ,CAAiB,IAAjB,CAAZ;AACA,SAAKO,SAAL,GAAe,KAAKA,SAAL,CAAeP,IAAf,CAAoB,IAApB,CAAf;AACA,SAAKQ,QAAL,GAAc,KAAKA,QAAL,CAAcR,IAAd,CAAmB,IAAnB,CAAd;AACA,SAAKS,QAAL,GAAc,KAAKA,QAAL,CAAcT,IAAd,CAAmB,IAAnB,CAAd;AAEA,SAAKU,YAAL,GAAkB,KAAKA,YAAL,CAAkBV,IAAlB,CAAuB,IAAvB,CAAlB;AACA,SAAKW,SAAL,GAAe,KAAKA,SAAL,CAAeX,IAAf,CAAoB,IAApB,CAAf;AACA,SAAKY,gBAAL,GAAsB,KAAKA,gBAAL,CAAsBZ,IAAtB,CAA2B,IAA3B,CAAtB,CApCc,CAqCd;AAEA;;AACA,SAAKa,cAAL,GAAoB,KAAKA,cAAL,CAAoBb,IAApB,CAAyB,IAAzB,CAApB,CAxCc,CAyCd;;AAEA,SAAKc,SAAL,GAAe,KAAKA,SAAL,CAAed,IAAf,CAAoB,IAApB,CAAf;AACA,SAAKe,UAAL,GAAgB,KAAKA,UAAL,CAAgBf,IAAhB,CAAqB,IAArB,CAAhB;AAEA,SAAKgB,UAAL,GAAgB,KAAKA,UAAL,CAAgBhB,IAAhB,CAAqB,IAArB,CAAhB;AACA,SAAKiB,SAAL,GAAe,KAAKA,SAAL,CAAejB,IAAf,CAAoB,IAApB,CAAf;AACA,SAAKkB,OAAL,GAAa,KAAKA,OAAL,CAAalB,IAAb,CAAkB,IAAlB,CAAb;AAEA,SAAKmB,WAAL,GAAiB,KAAKA,WAAL,CAAiBnB,IAAjB,CAAsB,IAAtB,CAAjB;AACH;;AAEDG,EAAAA,SAAS,GAAE;AACP,SAAKW,SAAL;AACA,SAAKM,QAAL,CAAc;AACV3B,MAAAA,IAAI,EAAE,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,EAAO,CAAC,CAAD,EAAG,CAAH,CAAP,EAAa,CAAC,CAAD,EAAG,CAAH,CAAb,EAAmB,CAAC,CAAD,EAAG,CAAH,CAAnB,EAAyB,CAAC,CAAD,EAAG,CAAH,CAAzB,EAA+B,CAAC,CAAD,EAAG,CAAH,CAA/B,CADI;AAEVC,MAAAA,SAAS,EAAE,OAFD;AAGVE,MAAAA,eAAe,EAAE,IAHP;AAIV;AAEA;AACAC,MAAAA,QAAQ,EAAE,KAAKgB,cAAL;AAPA,KAAd;AASH;;AAEDX,EAAAA,MAAM,CAACmB,KAAD,EAAO;AACT,SAAKD,QAAL,CAAc;AACV7B,MAAAA,GAAG,EAAE8B,KADK;AAEV5B,MAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWK;AAFP,KAAd;AAIH;;AAEDuB,EAAAA,UAAU,GAAE;AACR,SAAK5B,KAAL,CAAWG,GAAX,GAAiB,IAAI+B,KAAJ,CAAU,KAAKlC,KAAL,CAAWC,IAArB,CAAjB;;AAEA,SAAK,IAAIkC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKnC,KAAL,CAAWC,IAA1B,EAA+BkC,CAAC,EAAhC,EAAmC;AAC/B,WAAKnC,KAAL,CAAWG,GAAX,CAAegC,CAAf,IAAoB,IAAID,KAAJ,CAAU,KAAKlC,KAAL,CAAWC,IAArB,CAApB;AACH;;AAED,SAAK,IAAIkC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKnC,KAAL,CAAWC,IAA1B,EAA+BkC,CAAC,EAAhC,EAAmC;AAC/B,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKpC,KAAL,CAAWC,IAA1B,EAA+BmC,CAAC,EAAhC,EAAmC;AAC/B,aAAKpC,KAAL,CAAWG,GAAX,CAAegC,CAAf,EAAkBC,CAAlB,iBAAsB;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAtB;AACH;AACJ;AACJ,GAtFsB,CAwFvB;;;AAGAnB,EAAAA,WAAW,GAAE;AAET,SAAKY,SAAL;AACA,SAAKlB,OAAL;AACA,SAAKoB,WAAL;AAGA,SAAKL,SAAL,GAPS,CAQT;;AACA,SAAKC,UAAL,CAAgB,KAAK3B,KAAL,CAAWK,IAA3B,EATS,CAWT;;AACA,SAAKsB,UAAL,CAAgB,KAAK3B,KAAL,CAAWS,QAA3B;AAEA4B,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAe,KAAKtC,KAAL,CAAWE,KAAtC;AACAmC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgB,KAAKtC,KAAL,CAAWK,IAAX,CAAgBkC,MAA5C;AAGA,SAAKzB,MAAL,CAAY,KAAKd,KAAL,CAAWG,GAAvB;AACJ;;AAEDqB,EAAAA,gBAAgB,GAAE;AACd,QAAG,KAAKxB,KAAL,CAAWK,IAAX,CAAgBkC,MAAhB,IAAwB,CAA3B,EAA6B;AACxB,UAAIC,IAAI,GAAC,KAAKxC,KAAL,CAAWK,IAAX,CAAgB,CAAhB,CAAT;AACA,UAAIoC,KAAK,GAAC,KAAKzC,KAAL,CAAWK,IAAX,CAAgB,CAAhB,CAAV;;AAEA,UAAIoC,KAAK,CAAC,CAAD,CAAL,GAASD,IAAI,CAAC,CAAD,CAAd,KAAqB,CAAxB,EAA0B;AACtB,eAAO,MAAP;AACH,OAFD,MAGK,IAAIC,KAAK,CAAC,CAAD,CAAL,GAASD,IAAI,CAAC,CAAD,CAAd,KAAqB,CAAC,CAAzB,EAA2B;AAC5B,eAAO,OAAP;AACH,OAFI,MAGA,IAAIC,KAAK,CAAC,CAAD,CAAL,GAASD,IAAI,CAAC,CAAD,CAAd,KAAqB,CAAxB,EAA0B;AAC3B,eAAO,IAAP;AACH,OAFI,MAGA,IAAIC,KAAK,CAAC,CAAD,CAAL,GAASD,IAAI,CAAC,CAAD,CAAd,KAAqB,CAAC,CAAzB,EAA2B;AAC5B,eAAO,MAAP;AACH;AACL;AACJ;;AAGD3B,EAAAA,WAAW,CAAC6B,KAAD,EAAOC,KAAP,EAAa;AACnB,WAASD,KAAK,CAAC,CAAD,CAAL,KAAWC,KAAK,CAAC,CAAD,CAAjB,IAA0BD,KAAK,CAAC,CAAD,CAAL,KAAWC,KAAK,CAAC,CAAD,CAAlD;AACJ;;AAEApB,EAAAA,SAAS,GAAE;AACP,QAAIqB,IAAI,GAAC,KAAK5C,KAAL,CAAWK,IAAX,CAAgB,CAAhB,CAAT;;AACA,YAAQ,KAAKL,KAAL,CAAWO,aAAnB;AACI,WAAK,OAAL;AACI;AACA,aAAKP,KAAL,CAAWK,IAAX,CAAgBwC,OAAhB,CAAwB,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAQ,CAAT,EAAWA,IAAI,CAAC,CAAD,CAAf,CAAxB,EAFJ,CAGI;;AACA;;AACJ,WAAK,MAAL;AACI;AACA,aAAK5C,KAAL,CAAWK,IAAX,CAAgBwC,OAAhB,CAAwB,CAACD,IAAI,CAAC,CAAD,CAAL,EAASA,IAAI,CAAC,CAAD,CAAJ,GAAQ,CAAjB,CAAxB,EAFJ,CAGI;;AACA;;AACJ,WAAK,MAAL;AACI;AACA,aAAK5C,KAAL,CAAWK,IAAX,CAAgBwC,OAAhB,CAAwB,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAQ,CAAT,EAAWA,IAAI,CAAC,CAAD,CAAf,CAAxB,EAFJ,CAGI;;AACA;;AACJ,WAAK,IAAL;AACI;AACA,aAAK5C,KAAL,CAAWK,IAAX,CAAgBwC,OAAhB,CAAwB,CAACD,IAAI,CAAC,CAAD,CAAL,EAASA,IAAI,CAAC,CAAD,CAAJ,GAAQ,CAAjB,CAAxB,EAFJ,CAGI;;AACA;AApBR;AAsBH;;AAEDlB,EAAAA,SAAS,GAAE;AACP,SAAK,IAAIS,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKnC,KAAL,CAAWG,GAAX,CAAeoC,MAA9B,EAAqCJ,CAAC,EAAtC,EAAyC;AACrC,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKpC,KAAL,CAAWG,GAAX,CAAeoC,MAA9B,EAAqCH,CAAC,EAAtC,EAAyC;AACrC,aAAKpC,KAAL,CAAWG,GAAX,CAAegC,CAAf,EAAkBC,CAAlB,iBAAsB;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAtB;AACH;AACJ;AACJ;;AAEDT,EAAAA,UAAU,CAACxB,GAAD,EAAK;AAEX,QAAIA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,MAAY2C,SAAhB,EAA2B;AACvB,WAAK9C,KAAL,CAAWG,GAAX,CAAeA,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B,iBAAgC;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAAhC;AACA;AACH;;AAAA;;AACD,SAAK,IAAIgC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAChC,GAAG,CAACoC,MAApB,EAA2BJ,CAAC,EAA5B,EAA+B;AAC3B,UAAIY,CAAC,GAAG5C,GAAG,CAACgC,CAAD,CAAH,CAAO,CAAP,CAAR;AACA,UAAIa,CAAC,GAAG7C,GAAG,CAACgC,CAAD,CAAH,CAAO,CAAP,CAAR;AAEA,WAAKnC,KAAL,CAAWG,GAAX,CAAe4C,CAAf,EAAkBC,CAAlB,iBAAsB;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAAtB;AACH;AACJ;;AAEFhC,EAAAA,SAAS,GAAG;AAEP,YAAQ,KAAKhB,KAAL,CAAWM,SAAnB;AACI,WAAK,IAAL;AACI,aAAKY,MAAL;AACA;;AACJ,WAAK,OAAL;AACI,aAAKC,SAAL;AACA;;AACJ,WAAK,MAAL;AACI,aAAKC,QAAL;AACA;;AACJ,WAAK,MAAL;AACI,aAAKC,QAAL;AACA;AAZR;;AAcA,SAAKrB,KAAL,CAAWO,aAAX,GAAyB,KAAKiB,gBAAL,EAAzB;AACA,SAAKP,WAAL;AACH;;AAEDE,EAAAA,SAAS,GAAE;AACP,QAAI8B,OAAO,GAAC,KAAKjD,KAAL,CAAWK,IAAvB;AACA4C,IAAAA,OAAO,CAAC,CAAD,CAAP,gBAAW;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAX;AACAA,IAAAA,OAAO,CAACC,KAAR;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,CAACF,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,IAA6B,CAA9B,EAAgCU,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,CAAhC,CAAb;AAEA,SAAKvC,KAAL,CAAWK,IAAX,GAAgB4C,OAAhB;AACH;;AAED7B,EAAAA,QAAQ,GAAE;AACN,QAAI6B,OAAO,GAAC,KAAKjD,KAAL,CAAWK,IAAvB;AACA4C,IAAAA,OAAO,CAAC,CAAD,CAAP,gBAAW;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAX;AACAA,IAAAA,OAAO,CAACC,KAAR;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,CAACF,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,CAAD,EAA8BU,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,IAA6B,CAA3D,CAAb;AAEA,SAAKvC,KAAL,CAAWK,IAAX,GAAgB4C,OAAhB;AACH;;AAED5B,EAAAA,QAAQ,GAAE;AACN,QAAI4B,OAAO,GAAC,KAAKjD,KAAL,CAAWK,IAAvB;AACA4C,IAAAA,OAAO,CAAC,CAAD,CAAP,gBAAW;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAX;AACAA,IAAAA,OAAO,CAACC,KAAR;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,CAACF,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,IAA6B,CAA9B,EAAgCU,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,CAAhC,CAAb;AAEA,SAAKvC,KAAL,CAAWK,IAAX,GAAgB4C,OAAhB;AACH;;AAED/B,EAAAA,MAAM,GAAE;AACJ,QAAI+B,OAAO,GAAC,KAAKjD,KAAL,CAAWK,IAAvB;AACA4C,IAAAA,OAAO,CAAC,CAAD,CAAP,gBAAW;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAX;AACAA,IAAAA,OAAO,CAACC,KAAR;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,CAACF,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,CAAD,EAA8BU,OAAO,CAACA,OAAO,CAACV,MAAR,GAAe,CAAhB,CAAP,CAA0B,CAA1B,IAA6B,CAA3D,CAAb;AAEA,SAAKvC,KAAL,CAAWK,IAAX,GAAgB4C,OAAhB;AACH;;AAEF3B,EAAAA,YAAY,CAAC8B,CAAD,EAAG;AAEd,QAAG,CAAC,KAAKpD,KAAL,CAAWQ,eAAf,EAAgC;;AAEhC,YAAO4C,CAAC,CAACC,IAAT;AACI,WAAK,YAAL;AACI,YAAI,KAAKrD,KAAL,CAAWM,SAAX,KAAuB,OAAvB,IAAkC,KAAKN,KAAL,CAAWM,SAAX,KAAuB,MAA7D,EAAsE;AACtE,aAAKN,KAAL,CAAWM,SAAX,GAAuB,OAAvB;AACA;;AACJ,WAAK,WAAL;AACI,YAAI,KAAKN,KAAL,CAAWM,SAAX,KAAuB,MAAvB,IAAiC,KAAKN,KAAL,CAAWM,SAAX,KAAuB,IAA5D,EAAmE;AACnE,aAAKN,KAAL,CAAWM,SAAX,GAAuB,MAAvB;AACA;;AACJ,WAAK,WAAL;AACI,YAAI,KAAKN,KAAL,CAAWM,SAAX,KAAuB,OAAvB,IAAkC,KAAKN,KAAL,CAAWM,SAAX,KAAuB,MAA7D,EAAsE;AACtE,aAAKN,KAAL,CAAWM,SAAX,GAAuB,MAAvB;AACA;;AACJ,WAAK,SAAL;AACI,YAAI,KAAKN,KAAL,CAAWM,SAAX,KAAuB,MAAvB,IAAiC,KAAKN,KAAL,CAAWM,SAAX,KAAuB,IAA5D,EAAmE;AACnE,aAAKN,KAAL,CAAWM,SAAX,GAAuB,IAAvB;AACA;AAhBR;;AAkBI,SAAKN,KAAL,CAAWQ,eAAX,GAA2B,KAA3B;AACH;;AAID8C,EAAAA,iBAAiB,GAAE;AACf,SAAK1B,UAAL;AACA,SAAK5B,KAAL,CAAWS,QAAX,GAAoB,KAAKgB,cAAL,EAApB;AACA,SAAK8B,QAAL,GAAgBC,WAAW,CAAC,KAAKxC,SAAN,EAAgB,KAAKhB,KAAL,CAAWE,KAA3B,CAA3B;AACAuD,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAkC,KAAKpC,YAAvC;AACH;;AAEDqC,EAAAA,oBAAoB,GAAE;AAClBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAqC,KAAKtC,YAA1C;AACH;;AAEDuC,EAAAA,mBAAmB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACrC,QAAIA,SAAS,CAAC7D,KAAV,KAAmB,KAAKF,KAAL,CAAWE,KAAlC,EAAyC;AACrC8D,MAAAA,aAAa,CAAC,KAAKT,QAAN,CAAb;AACA,WAAKA,QAAL,GAAgBC,WAAW,CAAC,KAAKxC,SAAN,EAAiB,KAAKhB,KAAL,CAAWE,KAA5B,CAA3B;AACH;AAEJ;;AAED4B,EAAAA,OAAO,GAAE;AACL,WAAO,KAAK9B,KAAL,CAAWK,IAAX,CAAgB,KAAKL,KAAL,CAAWK,IAAX,CAAgBkC,MAAhB,GAAuB,CAAvC,CAAP;AACH,GAjSsB,CAoSvB;AAEA;;;AAEAV,EAAAA,SAAS,GAAE;AACP,QAAG,KAAKhB,WAAL,CAAiB,KAAKiB,OAAL,EAAjB,EAAgC,KAAK9B,KAAL,CAAWS,QAA3C,CAAH,EAAwD;AACpD,WAAKc,SAAL;AACA,WAAKvB,KAAL,CAAWS,QAAX,GAAoB,KAAKgB,cAAL,EAApB;;AACA,UAAI,KAAKzB,KAAL,CAAWE,KAAX,GAAiB,EAArB,EAAwB;AACpB,aAAK8B,QAAL,CAAc;AAAC9B,UAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAX,GAAmB;AAA3B,SAAd;AACH;AACJ;AACJ;;AAEDuB,EAAAA,cAAc,GAAE;AACZ,WAAO,CAACwC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKnE,KAAL,CAAWC,IAAX,GAAkB,CAAnC,CAAX,IAAoD,CAArD,EAAuDgE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKnE,KAAL,CAAWC,IAAX,GAAkB,CAAnC,CAAX,IAAoD,CAA3G,CAAP;AACH,GApTsB,CAsTvB;;;AAEAU,EAAAA,OAAO,GAAE;AACL,QAAIyD,IAAI,GAAC,KAAKtC,OAAL,EAAT;;AACA,SAAK,IAAIK,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKnC,KAAL,CAAWK,IAAX,CAAgBkC,MAAhB,GAAuB,CAAtC,EAAwCJ,CAAC,EAAzC,EAA4C;AACxC,UAAI,KAAKnC,KAAL,CAAWK,IAAX,CAAgB8B,CAAhB,EAAmB,CAAnB,MAAwBiC,IAAI,CAAC,CAAD,CAA5B,IAAmC,KAAKpE,KAAL,CAAWK,IAAX,CAAgB8B,CAAhB,EAAmB,CAAnB,MAAwBiC,IAAI,CAAC,CAAD,CAAnE,EAAuE;AACnE,aAAKrD,SAAL;AACH;AACJ;;AACD,WAAO,IAAP;AAEJ;;AAEDgB,EAAAA,WAAW,GAAE;AACR,QAAIqC,IAAI,GAAC,KAAKtC,OAAL,EAAT;;AACA,QAAIsC,IAAI,CAAC,CAAD,CAAJ,GAAQ,CAAR,IAAaA,IAAI,CAAC,CAAD,CAAJ,GAAQ,KAAKpE,KAAL,CAAWC,IAAX,GAAgB,CAArC,IAA0CmE,IAAI,CAAC,CAAD,CAAJ,GAAQ,CAAlD,IAAuDA,IAAI,CAAC,CAAD,CAAJ,GAAQ,KAAKpE,KAAL,CAAWC,IAAX,GAAgB,CAAnF,EAAqF;AACjF,WAAKc,SAAL;AACH;AACL;;AAGAsD,EAAAA,MAAM,GAAE;AAGJ,SAAKrE,KAAL,CAAWQ,eAAX,GAA2B,IAA3B;AAEA,wBAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,GAAG,EAAE,KAAKR,KAAL,CAAWG;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAOH;;AAvVsB;;AA0V3B,eAAeN,GAAf","sourcesContent":["import React, {Component} from \"react\"\nimport Grid from \"./Grid\"\n\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n\n        this.state={\n            size: 40,\n            speed: 250,\n            arr:[[]],\n            count: 0,\n            //From Snake.js\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            direction: \"RIGHT\",\n            tailDirection: \"\",\n            directionUpdate: true,\n            //From Snake.js\n\n            //From Food.js\n            location: [],\n            foodAte: false\n            //From Food.js\n        }\n        this.bodyHit=this.bodyHit.bind(this);\n        this.cellCompare=this.cellCompare.bind(this);\n        this.setArr=this.setArr.bind(this);\n        this.gameReset=this.gameReset.bind(this);\n\n        //From Snake.js\n        this.snakeMove=this.snakeMove.bind(this);\n        this.snakeUpdate=this.snakeUpdate.bind(this);\n\n        this.moveUp=this.moveUp.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        this.moveDown=this.moveDown.bind(this);\n        this.moveLeft=this.moveLeft.bind(this);\n\n        this.eventHandler=this.eventHandler.bind(this);\n        this.snakeGrow=this.snakeGrow.bind(this);\n        this.getTailDirection=this.getTailDirection.bind(this);\n        //From Snake.js\n\n        //From Food.js\n        this.randomLocation=this.randomLocation.bind(this);\n        //From Food.js\n\n        this.eraseGrid=this.eraseGrid.bind(this);\n        this.refillGrid=this.refillGrid.bind(this);\n\n        this.intialFill=this.intialFill.bind(this);\n        this.checkFood=this.checkFood.bind(this);\n        this.getHead=this.getHead.bind(this);\n        \n        this.boundaryHit=this.boundaryHit.bind(this);\n    }\n\n    gameReset(){\n        this.eraseGrid();\n        this.setState({\n            dots: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]],\n            direction: \"RIGHT\",\n            directionUpdate: true,\n            //From Snake.js\n\n            //From Food.js\n            location: this.randomLocation()\n        })\n    }\n\n    setArr(array){\n        this.setState({\n            arr: array,\n            dots: this.state.dots\n        })\n    }\n\n    intialFill(){\n        this.state.arr = new Array(this.state.size);\n\n        for (let i=0;i<this.state.size;i++){\n            this.state.arr[i] = new Array(this.state.size);\n        }\n\n        for (let i=0;i<this.state.size;i++){\n            for (let j=0;j<this.state.size;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n    }\n\n    //From Snake.js\n    \n\n    snakeUpdate(){\n\n        this.checkFood();\n        this.bodyHit();\n        this.boundaryHit();\n\n\n        this.eraseGrid();\n        // Snake Entry to arr\n        this.refillGrid(this.state.dots);\n\n        //Food Entry to arr\n        this.refillGrid(this.state.location);\n\n        console.log(\"Speed is: \" + this.state.speed);\n        console.log(\"Length is: \" + this.state.dots.length);\n        \n        \n        this.setArr(this.state.arr);\n   }\n\n   getTailDirection(){\n       if(this.state.dots.length>=2){\n            let last=this.state.dots[0];\n            let slast=this.state.dots[1];\n\n            if((slast[0]-last[0])===1){\n                return \"LEFT\";\n            }\n            else if((slast[0]-last[0])===-1){\n                return \"RIGHT\";\n            }\n            else if((slast[1]-last[1])===1){\n                return \"UP\";\n            }\n            else if((slast[0]-last[0])===-1){\n                return \"DOWN\";\n            }\n       }\n   }\n\n\n   cellCompare(cell1,cell2){\n        return ((cell1[0]===cell2[0]) && (cell1[1]===cell2[1]));\n   }\n\n    snakeGrow(){\n        let tail=this.state.dots[0];\n        switch (this.state.tailDirection){\n            case \"RIGHT\":\n                // let some1=this.state.dots;\n                this.state.dots.unshift([tail[0]+1,tail[1]]);\n                // this.setState({dots: some1})\n                break;\n            case \"DOWN\":\n                // let some2=this.state.dots;\n                this.state.dots.unshift([tail[0],tail[1]+1]);\n                // this.setState({dots: some2})\n                break;\n            case \"LEFT\":\n                // let some3=this.state.dots;\n                this.state.dots.unshift([tail[0]-1,tail[1]]);\n                // this.setState({dots: some3})\n                break;\n            case \"UP\":\n                // let some4=this.state.dots;\n                this.state.dots.unshift([tail[0],tail[1]-1]);\n                // this.setState({dots: some4})\n                break;       \n        }\n    }\n\n    eraseGrid(){\n        for (let i=0;i<this.state.arr.length;i++){\n            for (let j=0;j<this.state.arr.length;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n    }\n\n    refillGrid(arr){\n\n        if (arr[0][0]===undefined) {\n            this.state.arr[arr[0]][arr[1]]= <div className=\"dot\"></div>;\n            return;\n        };\n        for (let i=0; i<arr.length;i++){\n            let x = arr[i][0];\n            let y = arr[i][1];\n\n            this.state.arr[x][y]= <div className=\"dot\"></div>;\n        }\n    }\n\n   snakeMove() {\n\n        switch (this.state.direction){\n            case \"UP\":\n                this.moveUp();\n                break;\n            case \"RIGHT\":\n                this.moveRight();\n                break;\n            case \"DOWN\":\n                this.moveDown();\n                break;\n            case \"LEFT\":\n                this.moveLeft();\n                break;\n        } \n        this.state.tailDirection=this.getTailDirection();   \n        this.snakeUpdate();  \n    }\n\n    moveRight(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveDown(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]+1]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveLeft(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0]-1,tempArr[tempArr.length-1][1]]);\n\n        this.state.dots=tempArr;\n    }\n\n    moveUp(){\n        let tempArr=this.state.dots;\n        tempArr[0]=<div className=\"dot\"></div>;\n        tempArr.shift()\n        tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]-1]);\n\n        this.state.dots=tempArr;\n    }\n\n   eventHandler(e){\n\n    if(!this.state.directionUpdate) return;\n\n    switch(e.code){\n        case \"ArrowRight\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"RIGHT\";\n            break;\n        case \"ArrowDown\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"DOWN\";\n            break;\n        case \"ArrowLeft\":\n            if (this.state.direction===\"RIGHT\" || this.state.direction===\"LEFT\" ) return;\n            this.state.direction = \"LEFT\";\n            break;\n        case \"ArrowUp\":\n            if (this.state.direction===\"DOWN\" || this.state.direction===\"UP\" ) return;\n            this.state.direction = \"UP\";\n            break;\n        }\n        this.state.directionUpdate=false;\n    }\n\n\n\n    componentDidMount(){   \n        this.intialFill(); \n        this.state.location=this.randomLocation();\n        this.interval = setInterval(this.snakeMove,this.state.speed);\n        window.addEventListener(\"keydown\",this.eventHandler);\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener(\"keydown\",this.eventHandler);\n    }\n\n    componentWillUpdate(prevProps, prevState){\n        if (prevState.speed!== this.state.speed) {\n            clearInterval(this.interval);\n            this.interval = setInterval(this.snakeMove, this.state.speed);\n        }\n\n    }\n\n    getHead(){\n        return this.state.dots[this.state.dots.length-1];\n    }\n\n\n    //From Snake.js\n\n    //From Food.js\n\n    checkFood(){\n        if(this.cellCompare(this.getHead(),this.state.location)){\n            this.snakeGrow();\n            this.state.location=this.randomLocation();\n            if (this.state.speed>50){\n                this.setState({speed: this.state.speed - 25});\n            }\n        }\n    }\n\n    randomLocation(){\n        return [Math.floor(Math.random() * (this.state.size - 0)) + 0,Math.floor(Math.random() * (this.state.size - 0)) + 0];\n    }\n\n    //From Food.js\n\n    bodyHit(){\n        let head=this.getHead();\n        for (let i=0;i<this.state.dots.length-1;i++){\n            if (this.state.dots[i][0]===head[0] && this.state.dots[i][1]===head[1]){\n                this.gameReset();\n            }\n        }\n        return null;\n\n   }\n\n   boundaryHit(){\n        let head=this.getHead();\n        if (head[0]<0 || head[0]>this.state.size-1 || head[1]<0 || head[1]>this.state.size-1){\n            this.gameReset();\n        }\n   }\n     \n\n    render(){\n\n\n        this.state.directionUpdate=true;\n\n        return(\n            \n            <div className=\"container\">\n                <Grid arr={this.state.arr}/>\n            </div>\n            \n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}