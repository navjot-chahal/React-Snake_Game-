{"ast":null,"code":"var _jsxFileName = \"/Users/chahal/Documents/React Projects/snake/src/Grid.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [[]],\n      direction: \"RIGHT\"\n    };\n    this.snakeMove = this.snakeMove.bind(this);\n    this.snakeUpdate = this.snakeUpdate.bind(this); // this.moveUp=this.moveUp.bind(this);\n\n    this.moveRight = this.moveRight.bind(this); // this.moveDown=this.moveDown.bind(this);\n    // this.moveLeft=this.moveLeft.bind(this);\n  }\n\n  snakeMove() {\n    switch (this.state.direction) {\n      // case \"UP\":\n      //     this.moveUp();\n      //     break;\n      case \"RIGHT\":\n        this.moveRight();\n        break;\n      // case \"DOWN\":\n      //     this.moveDown();\n      //     break;\n      // case \"LEFT\":\n      //     this.moveLeft();\n      //     break;\n    }\n  }\n\n  moveRight() {\n    console.log(this.props.dots);\n    let tempArr = this.props.dots;\n    console.log(tempArr);\n    tempArr.shift();\n    tempArr.push([tempArr[tempArr.length - 1][0] + 1, tempArr[tempArr.length - 1][1]]);\n    this.setState({\n      arr: tempArr\n    });\n    console.log(tempArr); // console.log(this.props.dots);\n    // console.log(this.state.arr);\n    // this.props.dots=tempArr;\n  } // moveDown(){\n  //     let tempArr=this.props.dots;\n  //     tempArr.shift();\n  //     console.log(tempArr);\n  //     tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]]+1);\n  //     this.setState({\n  //         arr: tempArr\n  //     })\n  // }\n\n\n  snakeUpdate() {\n    // Snake update\n    let som = this.props.dots;\n\n    for (let i = 0; i < som.length; i++) {\n      let x = this.props.dots[i][0];\n      let y = this.props.dots[i][1];\n      this.state.arr[x][y] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 34\n      }, this);\n    } // Snake update\n\n  }\n\n  componentDidMount() {\n    this.snakeUpdate(); // console.log(this.props.dots);\n    // this.snakeMove();\n\n    setInterval(this.snakeMove, 1000);\n  }\n\n  render() {\n    // Fixed!!!\n    var size = 40;\n    this.state.arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      this.state.arr[i] = new Array(size);\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        this.state.arr[i][j] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 39\n        }, this);\n      }\n    } // Fixed!!!\n\n\n    this.snakeUpdate();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.arr.map(row => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;","map":{"version":3,"sources":["/Users/chahal/Documents/React Projects/snake/src/Grid.js"],"names":["React","Component","Grid","constructor","props","state","arr","direction","snakeMove","bind","snakeUpdate","moveRight","console","log","dots","tempArr","shift","push","length","setState","som","i","x","y","componentDidMount","setInterval","render","size","Array","j","map","row"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\n\nclass Grid extends Component{\n    constructor(props){\n        super(props);\n\n\n        this.state={\n            arr:[[]],\n            direction: \"RIGHT\"\n        }\n\n        this.snakeMove=this.snakeMove.bind(this);\n        this.snakeUpdate=this.snakeUpdate.bind(this);\n        // this.moveUp=this.moveUp.bind(this);\n        this.moveRight=this.moveRight.bind(this);\n        // this.moveDown=this.moveDown.bind(this);\n        // this.moveLeft=this.moveLeft.bind(this);\n    }\n\n    snakeMove() {\n\n        switch (this.state.direction){\n            // case \"UP\":\n            //     this.moveUp();\n            //     break;\n            case \"RIGHT\":\n                this.moveRight();\n                break;\n            // case \"DOWN\":\n            //     this.moveDown();\n            //     break;\n            // case \"LEFT\":\n            //     this.moveLeft();\n            //     break;\n        }            \n    }\n\n    moveRight(){\n        console.log(this.props.dots);\n        let tempArr=this.props.dots;\n        console.log(tempArr);\n        tempArr.shift();\n        tempArr.push([tempArr[tempArr.length-1][0]+1,tempArr[tempArr.length-1][1]]);\n        this.setState({\n            arr: tempArr\n        })\n        console.log(tempArr);\n        // console.log(this.props.dots);\n        // console.log(this.state.arr);\n        // this.props.dots=tempArr;\n    }\n\n    // moveDown(){\n    //     let tempArr=this.props.dots;\n    //     tempArr.shift();\n    //     console.log(tempArr);\n    //     tempArr.push([tempArr[tempArr.length-1][0],tempArr[tempArr.length-1][1]]+1);\n    //     this.setState({\n    //         arr: tempArr\n    //     })\n    // }\n\n   snakeUpdate(){\n       // Snake update\n       let som=this.props.dots;\n       for (let i=0; i<som.length;i++){\n           let x = this.props.dots[i][0];\n           let y = this.props.dots[i][1];\n\n           this.state.arr[x][y]= <div className=\"dot\"></div>;\n       }\n       // Snake update\n   }\n\n    componentDidMount(){   \n        this.snakeUpdate();\n        // console.log(this.props.dots);\n        // this.snakeMove();\n        setInterval(this.snakeMove,1000);\n    }\n     \n\n    render(){\n\n        // Fixed!!!\n        var size = 40;\n        this.state.arr = new Array(size);\n\n        for (let i=0;i<size;i++){\n            this.state.arr[i] = new Array(size);\n        }\n\n        for (let i=0;i<size;i++){\n            for (let j=0;j<size;j++){\n                this.state.arr[i][j]= <div className=\"block\"></div>;\n            }\n        }\n        // Fixed!!!\n\n        this.snakeUpdate(); \n\n\n        return(\n            <div>\n                {this.state.arr.map((row) => {\n                    return (\n                        <div className=\"row\">\n                            {row}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\n\n/* <div>\n    {arr.map((row,rowId) => {\n        return (\n            <div key={rowId}>\n                {row.map((node,nodeId) => {\n                    return (\n                        newBlock()\n                    )\n                })}\n            </div>\n        )\n    })}\n</div> */\n\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}